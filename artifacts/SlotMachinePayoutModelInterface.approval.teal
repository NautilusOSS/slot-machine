#pragma version 10

contract.SlotMachinePayoutModelInterface.approval_program:
    // src/src/contract.py:170
    // class SlotMachinePayoutModelInterface(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@7
    method "get_payout_model()(uint64[6],uint64[6])"
    method "set_payout_model(uint64[6],uint64[6])void"
    method "get_payout(uint64,uint64)uint64"
    txna ApplicationArgs 0
    match main_get_payout_model_route@2 main_set_payout_model_route@3 main_get_payout_route@4
    err // reject transaction

main_get_payout_model_route@2:
    // src/src/contract.py:175
    // @arc4.abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub get_payout_model
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_set_payout_model_route@3:
    // src/src/contract.py:182
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    int 1
    return

main_get_payout_route@4:
    // src/src/contract.py:189
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // src/src/contract.py:170
    // class SlotMachinePayoutModelInterface(ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // src/src/contract.py:189
    // @arc4.abimethod
    callsub get_payout
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_bare_routing@7:
    // src/src/contract.py:170
    // class SlotMachinePayoutModelInterface(ARC4Contract):
    txn OnCompletion
    !
    assert // reject transaction
    txn ApplicationID
    !
    assert // is creating
    int 1
    return


// contract.SlotMachinePayoutModelInterface.get_payout_model() -> bytes:
get_payout_model:
    // src/src/contract.py:175-176
    // @arc4.abimethod(readonly=True)
    // def get_payout_model(self) -> PayoutModel:
    proto 0 1
    // src/src/contract.py:180
    // return self._initial_payout_model()
    callsub _initial_payout_model
    retsub


// contract.SlotMachinePayoutModelInterface._initial_payout_model() -> bytes:
_initial_payout_model:
    // src/src/contract.py:205-206
    // @subroutine
    // def _initial_payout_model(self) -> PayoutModel:
    proto 0 1
    // src/src/contract.py:210-227
    // return PayoutModel(
    //     multipliers=arc4.StaticArray(
    //         arc4.UInt64(0),
    //         arc4.UInt64(0),
    //         arc4.UInt64(0),
    //         arc4.UInt64(0),
    //         arc4.UInt64(0),
    //         arc4.UInt64(0),
    //     ),
    //     probabilities=arc4.StaticArray(
    //         arc4.UInt64(0),
    //         arc4.UInt64(0),
    //         arc4.UInt64(0),
    //         arc4.UInt64(0),
    //         arc4.UInt64(0),
    //         arc4.UInt64(0),
    //     ),
    // )
    byte 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
    retsub


// contract.SlotMachinePayoutModelInterface.get_payout(bet_amount: bytes, r: bytes) -> bytes:
get_payout:
    // src/src/contract.py:189-190
    // @arc4.abimethod
    // def get_payout(self, bet_amount: arc4.UInt64, r: arc4.UInt64) -> arc4.UInt64:
    proto 2 1
    // src/src/contract.py:194
    // return arc4.UInt64(self._calculate_bet_payout(bet_amount.native, r.native))
    frame_dig -2
    btoi
    frame_dig -1
    btoi
    callsub _calculate_bet_payout
    itob
    retsub


// contract.SlotMachinePayoutModelInterface._calculate_bet_payout(bet_amount: uint64, r: uint64) -> uint64:
_calculate_bet_payout:
    // src/src/contract.py:196-197
    // @subroutine
    // def _calculate_bet_payout(self, bet_amount: UInt64, r: UInt64) -> UInt64:
    proto 2 1
    // src/src/contract.py:203
    // return UInt64(0)
    int 0
    retsub
