#pragma version 10

contract.SlotMachinePayoutModel.approval_program:
    txn ApplicationID
    bnz main_entrypoint@2
    callsub __init__

main_entrypoint@2:
    // src/src/contract.py:227
    // class SlotMachinePayoutModel(SlotMachinePayoutModelInterface, Upgradeable, Deleteable):
    txn NumAppArgs
    bz main_bare_routing@13
    method "set_payout_model(uint64[6],uint64[6])void"
    method "get_payout_model()(uint64[6],uint64[6])"
    method "get_payout(uint64,uint64)uint64"
    method "set_version(uint64,uint64)void"
    method "approve_update(bool)void"
    method "grant_upgrader(address)void"
    method "transfer(address)void"
    txna ApplicationArgs 0
    match main_set_payout_model_route@4 main_get_payout_model_route@5 main_get_payout_route@6 main_set_version_route@7 main_approve_update_route@8 main_grant_upgrader_route@9 main_transfer_route@10
    err // reject transaction

main_set_payout_model_route@4:
    // src/src/contract.py:257
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // src/src/contract.py:227
    // class SlotMachinePayoutModel(SlotMachinePayoutModelInterface, Upgradeable, Deleteable):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // src/src/contract.py:257
    // @arc4.abimethod
    callsub set_payout_model
    int 1
    return

main_get_payout_model_route@5:
    // src/src/contract.py:268
    // @arc4.abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub get_payout_model
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_get_payout_route@6:
    // src/src/contract.py:186
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // src/src/contract.py:227
    // class SlotMachinePayoutModel(SlotMachinePayoutModelInterface, Upgradeable, Deleteable):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // src/src/contract.py:186
    // @arc4.abimethod
    callsub get_payout
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_set_version_route@7:
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:83
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // src/src/contract.py:227
    // class SlotMachinePayoutModel(SlotMachinePayoutModelInterface, Upgradeable, Deleteable):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:83
    // @arc4.abimethod
    callsub set_version
    int 1
    return

main_approve_update_route@8:
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:101
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // src/src/contract.py:227
    // class SlotMachinePayoutModel(SlotMachinePayoutModelInterface, Upgradeable, Deleteable):
    txna ApplicationArgs 1
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:101
    // @arc4.abimethod
    callsub approve_update
    int 1
    return

main_grant_upgrader_route@9:
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:107
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // src/src/contract.py:227
    // class SlotMachinePayoutModel(SlotMachinePayoutModelInterface, Upgradeable, Deleteable):
    txna ApplicationArgs 1
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:107
    // @arc4.abimethod
    callsub grant_upgrader
    int 1
    return

main_transfer_route@10:
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/access/Ownable/contract.py:22
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    int 1
    return

main_bare_routing@13:
    // src/src/contract.py:227
    // class SlotMachinePayoutModel(SlotMachinePayoutModelInterface, Upgradeable, Deleteable):
    txn OnCompletion
    switch main_create@14 main_reject_bare_on_completion@17 main_reject_bare_on_completion@17 main_reject_bare_on_completion@17 main_on_update@15 main_on_delete@16
    err // reject transaction

main_create@14:
    // src/src/contract.py:227
    // class SlotMachinePayoutModel(SlotMachinePayoutModelInterface, Upgradeable, Deleteable):
    txn ApplicationID
    !
    assert // is creating
    int 1
    return

main_on_update@15:
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:92
    // @arc4.baremethod(allow_actions=["UpdateApplication"])
    txn ApplicationID
    assert // is not creating
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:92-93
    // @arc4.baremethod(allow_actions=["UpdateApplication"])
    // def on_update(self) -> None:
    callsub on_update
    int 1
    return

main_on_delete@16:
    // src/src/contract.py:57
    // @arc4.baremethod(allow_actions=["DeleteApplication"])
    txn ApplicationID
    assert // is not creating
    // src/src/contract.py:57-58
    // @arc4.baremethod(allow_actions=["DeleteApplication"])
    // def on_delete(self) -> None:  # pragma: no cover
    callsub on_delete
    int 1
    return

main_reject_bare_on_completion@17:
    // src/src/contract.py:227
    // class SlotMachinePayoutModel(SlotMachinePayoutModelInterface, Upgradeable, Deleteable):
    err // reject transaction


// contract.SlotMachinePayoutModel.set_payout_model(multipliers: bytes, probabilities: bytes) -> void:
set_payout_model:
    // src/src/contract.py:257-258
    // @arc4.abimethod
    // def set_payout_model(self, multipliers: arc4.StaticArray[arc4.UInt64, typing.Literal[6]], probabilities: arc4.StaticArray[arc4.UInt64, typing.Literal[6]]) -> None:
    proto 2 0
    // src/src/contract.py:262
    // self.only_owner()
    callsub only_owner
    // src/src/contract.py:263
    // self.payout_model = PayoutModel(multipliers=multipliers.copy(), probabilities=probabilities.copy())
    frame_dig -2
    frame_dig -1
    concat
    // src/src/contract.py:242-243
    // # payout model state
    // self.payout_model = self._initial_payout_model()
    byte "payout_model"
    // src/src/contract.py:263
    // self.payout_model = PayoutModel(multipliers=multipliers.copy(), probabilities=probabilities.copy())
    swap
    app_global_put
    // src/src/contract.py:264
    // arc4.emit(ModelUpdated(old_model=self.payout_model, new_model=self.payout_model))
    int 0
    // src/src/contract.py:242-243
    // # payout model state
    // self.payout_model = self._initial_payout_model()
    byte "payout_model"
    // src/src/contract.py:264
    // arc4.emit(ModelUpdated(old_model=self.payout_model, new_model=self.payout_model))
    app_global_get_ex
    assert // check self.payout_model exists
    int 0
    // src/src/contract.py:242-243
    // # payout model state
    // self.payout_model = self._initial_payout_model()
    byte "payout_model"
    // src/src/contract.py:264
    // arc4.emit(ModelUpdated(old_model=self.payout_model, new_model=self.payout_model))
    app_global_get_ex
    assert // check self.payout_model exists
    concat
    method "ModelUpdated((uint64[6],uint64[6]),(uint64[6],uint64[6]))"
    swap
    concat
    log
    retsub


// contract.SlotMachinePayoutModel.only_owner() -> void:
only_owner:
    // src/src/contract.py:248-249
    // @subroutine
    // def only_owner(self) -> None:
    proto 0 0
    // src/src/contract.py:253
    // assert Txn.sender == self.owner, "only owner can call this function"
    txn Sender
    int 0
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/access/Ownable/contract.py:20
    // self.owner = Account()
    byte "owner"
    // src/src/contract.py:253
    // assert Txn.sender == self.owner, "only owner can call this function"
    app_global_get_ex
    assert // check self.owner exists
    ==
    assert // only owner can call this function
    retsub


// contract.SlotMachinePayoutModel.get_payout_model() -> bytes:
get_payout_model:
    // src/src/contract.py:268-269
    // @arc4.abimethod(readonly=True)
    // def get_payout_model(self) -> PayoutModel:
    proto 0 1
    // src/src/contract.py:273
    // return self.payout_model
    int 0
    // src/src/contract.py:242-243
    // # payout model state
    // self.payout_model = self._initial_payout_model()
    byte "payout_model"
    // src/src/contract.py:273
    // return self.payout_model
    app_global_get_ex
    assert // check self.payout_model exists
    retsub


// contract.SlotMachinePayoutModelInterface.get_payout(bet_amount: bytes, r: bytes) -> bytes:
get_payout:
    // src/src/contract.py:186-187
    // @arc4.abimethod
    // def get_payout(self, bet_amount: arc4.UInt64, r: arc4.UInt64) -> arc4.UInt64:
    proto 2 1
    // src/src/contract.py:191
    // return arc4.UInt64(self._calculate_bet_payout(bet_amount.native, r.native))
    frame_dig -2
    btoi
    frame_dig -1
    btoi
    callsub _calculate_bet_payout
    itob
    retsub


// contract.SlotMachinePayoutModel._calculate_bet_payout(bet_amount: uint64, r: uint64) -> uint64:
_calculate_bet_payout:
    // src/src/contract.py:275-277
    // # override
    // @subroutine
    // def _calculate_bet_payout(self, bet_amount: UInt64, r: UInt64) -> UInt64:
    proto 2 1
    byte ""
    dup
    // src/src/contract.py:283-299
    // # multipliers = arc4.StaticArray(
    // #     arc4.UInt64(100),  # 100x
    // #     arc4.UInt64(50),  # 50x
    // #     arc4.UInt64(20),  # 20x
    // #     arc4.UInt64(10),  # 10x
    // #     arc4.UInt64(5),  # 5x
    // #     arc4.UInt64(2),  # 2x
    // # )
    // # probabilities = arc4.StaticArray(
    // #     arc4.UInt64(82_758),  # ~0.00008275862069
    // #     arc4.UInt64(1_655_172),  # ~0.001655172414
    // #     arc4.UInt64(8_275_862),  # ~0.008275862069
    // #     arc4.UInt64(16_551_724),  # ~0.01655172414
    // #     arc4.UInt64(41_379_310),  # ~0.04137931034
    // #     arc4.UInt64(165_517_241),  # ~0.1655172414
    // # )
    // for index in urange(6):
    int 0

_calculate_bet_payout_for_header@1:
    // src/src/contract.py:283-299
    // # multipliers = arc4.StaticArray(
    // #     arc4.UInt64(100),  # 100x
    // #     arc4.UInt64(50),  # 50x
    // #     arc4.UInt64(20),  # 20x
    // #     arc4.UInt64(10),  # 10x
    // #     arc4.UInt64(5),  # 5x
    // #     arc4.UInt64(2),  # 2x
    // # )
    // # probabilities = arc4.StaticArray(
    // #     arc4.UInt64(82_758),  # ~0.00008275862069
    // #     arc4.UInt64(1_655_172),  # ~0.001655172414
    // #     arc4.UInt64(8_275_862),  # ~0.008275862069
    // #     arc4.UInt64(16_551_724),  # ~0.01655172414
    // #     arc4.UInt64(41_379_310),  # ~0.04137931034
    // #     arc4.UInt64(165_517_241),  # ~0.1655172414
    // # )
    // for index in urange(6):
    frame_dig 2
    int 6
    <
    bz _calculate_bet_payout_after_for@6
    // src/src/contract.py:300
    // prob = self.payout_model.probabilities[index].native
    int 0
    // src/src/contract.py:242-243
    // # payout model state
    // self.payout_model = self._initial_payout_model()
    byte "payout_model"
    // src/src/contract.py:300
    // prob = self.payout_model.probabilities[index].native
    app_global_get_ex
    assert // check self.payout_model exists
    extract 48 48 // on error: Index access is out of bounds
    frame_dig 2
    int 8
    *
    dup
    frame_bury 0
    int 8
    extract3 // on error: Index access is out of bounds
    btoi
    dup
    frame_bury 1
    // src/src/contract.py:301
    // if r < prob:
    frame_dig -1
    >
    bz _calculate_bet_payout_after_if_else@4
    // src/src/contract.py:302
    // return bet_amount * self.payout_model.multipliers[index].native
    int 0
    // src/src/contract.py:242-243
    // # payout model state
    // self.payout_model = self._initial_payout_model()
    byte "payout_model"
    // src/src/contract.py:302
    // return bet_amount * self.payout_model.multipliers[index].native
    app_global_get_ex
    assert // check self.payout_model exists
    extract 0 48 // on error: Index access is out of bounds
    frame_dig 0
    int 8
    extract3 // on error: Index access is out of bounds
    btoi
    frame_dig -2
    *
    frame_bury 0
    retsub

_calculate_bet_payout_after_if_else@4:
    // src/src/contract.py:303
    // r -= prob
    frame_dig -1
    frame_dig 1
    -
    frame_bury -1
    // src/src/contract.py:283-299
    // # multipliers = arc4.StaticArray(
    // #     arc4.UInt64(100),  # 100x
    // #     arc4.UInt64(50),  # 50x
    // #     arc4.UInt64(20),  # 20x
    // #     arc4.UInt64(10),  # 10x
    // #     arc4.UInt64(5),  # 5x
    // #     arc4.UInt64(2),  # 2x
    // # )
    // # probabilities = arc4.StaticArray(
    // #     arc4.UInt64(82_758),  # ~0.00008275862069
    // #     arc4.UInt64(1_655_172),  # ~0.001655172414
    // #     arc4.UInt64(8_275_862),  # ~0.008275862069
    // #     arc4.UInt64(16_551_724),  # ~0.01655172414
    // #     arc4.UInt64(41_379_310),  # ~0.04137931034
    // #     arc4.UInt64(165_517_241),  # ~0.1655172414
    // # )
    // for index in urange(6):
    frame_dig 2
    int 1
    +
    frame_bury 2
    b _calculate_bet_payout_for_header@1

_calculate_bet_payout_after_for@6:
    // src/src/contract.py:305
    // return UInt64(0)
    int 0
    frame_bury 0
    retsub


// opensubmarine.contracts.update.Upgradeable.contract.Upgradeable.set_version(contract_version: bytes, deployment_version: bytes) -> void:
set_version:
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:83-86
    // @arc4.abimethod
    // def set_version(
    //     self, contract_version: arc4.UInt64, deployment_version: arc4.UInt64
    // ) -> None:
    proto 2 0
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:87
    // assert Txn.sender == self.upgrader, "must be upgrader"
    txn Sender
    int 0
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:34
    // self.upgrader = Account()
    byte "upgrader"
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:87
    // assert Txn.sender == self.upgrader, "must be upgrader"
    app_global_get_ex
    assert // check self.upgrader exists
    ==
    assert // must be upgrader
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:88
    // arc4.emit(VersionUpdated(contract_version, deployment_version))
    frame_dig -2
    frame_dig -1
    concat
    method "VersionUpdated(uint64,uint64)"
    swap
    concat
    log
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:89
    // self.contract_version = contract_version.native
    frame_dig -2
    btoi
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:31
    // self.contract_version = UInt64()
    byte "contract_version"
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:89
    // self.contract_version = contract_version.native
    swap
    app_global_put
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:90
    // self.deployment_version = deployment_version.native
    frame_dig -1
    btoi
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:32
    // self.deployment_version = UInt64()
    byte "deployment_version"
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:90
    // self.deployment_version = deployment_version.native
    swap
    app_global_put
    retsub


// opensubmarine.contracts.update.Upgradeable.contract.Upgradeable.approve_update(approval: bytes) -> void:
approve_update:
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:101-102
    // @arc4.abimethod
    // def approve_update(self, approval: arc4.Bool) -> None:
    proto 1 0
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:103
    // assert Txn.sender == self.owner, "must be owner"
    txn Sender
    int 0
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/access/Ownable/contract.py:20
    // self.owner = Account()
    byte "owner"
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:103
    // assert Txn.sender == self.owner, "must be owner"
    app_global_get_ex
    assert // check self.owner exists
    ==
    assert // must be owner
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:104
    // arc4.emit(UpdateApproved(arc4.Address(self.owner), approval))
    int 0
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/access/Ownable/contract.py:20
    // self.owner = Account()
    byte "owner"
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:104
    // arc4.emit(UpdateApproved(arc4.Address(self.owner), approval))
    app_global_get_ex
    assert // check self.owner exists
    frame_dig -1
    concat
    method "UpdateApproved(address,bool)"
    swap
    concat
    log
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:105
    // self.updatable = approval.native
    frame_dig -1
    int 0
    getbit
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:33
    // self.updatable = bool(1)
    byte "updatable"
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:105
    // self.updatable = approval.native
    swap
    app_global_put
    retsub


// opensubmarine.contracts.update.Upgradeable.contract.Upgradeable.grant_upgrader(upgrader: bytes) -> void:
grant_upgrader:
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:107-108
    // @arc4.abimethod
    // def grant_upgrader(self, upgrader: arc4.Address) -> None:
    proto 1 0
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:109
    // assert Txn.sender == Global.creator_address, "must be creator"
    txn Sender
    global CreatorAddress
    ==
    assert // must be creator
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:110
    // arc4.emit(UpgraderGranted(arc4.Address(self.upgrader), upgrader))
    int 0
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:34
    // self.upgrader = Account()
    byte "upgrader"
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:110
    // arc4.emit(UpgraderGranted(arc4.Address(self.upgrader), upgrader))
    app_global_get_ex
    assert // check self.upgrader exists
    frame_dig -1
    concat
    method "UpgraderGranted(address,address)"
    swap
    concat
    log
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:34
    // self.upgrader = Account()
    byte "upgrader"
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:111
    // self.upgrader = upgrader.native
    frame_dig -1
    app_global_put
    retsub


// opensubmarine.contracts.update.Upgradeable.contract.Upgradeable.on_update() -> void:
on_update:
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:92-93
    // @arc4.baremethod(allow_actions=["UpdateApplication"])
    // def on_update(self) -> None:
    proto 0 0
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:94-97
    // ##########################################
    // # WARNING: This app can be updated by the creator
    // ##########################################
    // assert Txn.sender == self.upgrader, "must be upgrader"
    txn Sender
    int 0
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:34
    // self.upgrader = Account()
    byte "upgrader"
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:94-97
    // ##########################################
    // # WARNING: This app can be updated by the creator
    // ##########################################
    // assert Txn.sender == self.upgrader, "must be upgrader"
    app_global_get_ex
    assert // check self.upgrader exists
    ==
    assert // must be upgrader
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:98
    // assert self.updatable == UInt64(1), "not approved"
    int 0
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:33
    // self.updatable = bool(1)
    byte "updatable"
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:98
    // assert self.updatable == UInt64(1), "not approved"
    app_global_get_ex
    assert // check self.updatable exists
    int 1
    ==
    assert // not approved
    retsub


// contract.Deleteable.on_delete() -> void:
on_delete:
    // src/src/contract.py:57-58
    // @arc4.baremethod(allow_actions=["DeleteApplication"])
    // def on_delete(self) -> None:  # pragma: no cover
    proto 0 0
    // src/src/contract.py:59-62
    // ##########################################
    // # WARNING: This app can be deleted by the creator (Development)
    // ##########################################
    // assert Txn.sender == Global.creator_address, "must be creator"
    txn Sender
    global CreatorAddress
    ==
    assert // must be creator
    // src/src/contract.py:63
    // assert self.deletable == UInt64(1), "not approved"
    int 0
    // src/src/contract.py:43
    // self.deletable = bool(1)
    byte "deletable"
    // src/src/contract.py:63
    // assert self.deletable == UInt64(1), "not approved"
    app_global_get_ex
    assert // check self.deletable exists
    int 1
    ==
    assert // not approved
    retsub


// contract.SlotMachinePayoutModel.__init__() -> void:
__init__:
    // src/src/contract.py:232
    // def __init__(self) -> None:
    proto 0 0
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/access/Ownable/contract.py:20
    // self.owner = Account()
    byte "owner"
    // src/src/contract.py:233-234
    // # ownable state
    // self.owner = Global.creator_address
    global CreatorAddress
    app_global_put
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:34
    // self.upgrader = Account()
    byte "upgrader"
    // src/src/contract.py:235-236
    // # upgradable state
    // self.upgrader = Global.creator_address
    global CreatorAddress
    app_global_put
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:31
    // self.contract_version = UInt64()
    byte "contract_version"
    // src/src/contract.py:237
    // self.contract_version = UInt64()
    int 0
    app_global_put
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:32
    // self.deployment_version = UInt64()
    byte "deployment_version"
    // src/src/contract.py:238
    // self.deployment_version = UInt64()
    int 0
    app_global_put
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:33
    // self.updatable = bool(1)
    byte "updatable"
    // src/src/contract.py:239
    // self.updatable = bool(1)
    int 1
    app_global_put
    // src/src/contract.py:43
    // self.deletable = bool(1)
    byte "deletable"
    // src/src/contract.py:240-241
    // # deleteable state
    // self.deletable = bool(1)
    int 1
    app_global_put
    // src/src/contract.py:242-243
    // # payout model state
    // self.payout_model = self._initial_payout_model()
    callsub _initial_payout_model
    byte "payout_model"
    swap
    app_global_put
    retsub


// contract.SlotMachinePayoutModelInterface._initial_payout_model() -> bytes:
_initial_payout_model:
    // src/src/contract.py:202-203
    // @subroutine
    // def _initial_payout_model(self) -> PayoutModel:
    proto 0 1
    // src/src/contract.py:207-224
    // return PayoutModel(
    //     multipliers=arc4.StaticArray(
    //         arc4.UInt64(0),
    //         arc4.UInt64(0),
    //         arc4.UInt64(0),
    //         arc4.UInt64(0),
    //         arc4.UInt64(0),
    //         arc4.UInt64(0),
    //     ),
    //     probabilities=arc4.StaticArray(
    //         arc4.UInt64(0),
    //         arc4.UInt64(0),
    //         arc4.UInt64(0),
    //         arc4.UInt64(0),
    //         arc4.UInt64(0),
    //         arc4.UInt64(0),
    //     ),
    // )
    byte 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
    retsub
