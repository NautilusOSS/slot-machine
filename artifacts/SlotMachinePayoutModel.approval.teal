#pragma version 10

contract.SlotMachinePayoutModel.approval_program:
    txn ApplicationID
    bnz main_entrypoint@2
    callsub __init__

main_entrypoint@2:
    // src/src/contract.py:181-183
    // class SlotMachinePayoutModel(
    //     SlotMachinePayoutModelInterface, Upgradeable, Stakeable, Deleteable
    // ):
    txn NumAppArgs
    bz main_bare_routing@14
    method "get_max_payout_multiplier()uint64"
    method "get_payout(uint64,uint64)uint64"
    method "set_version(uint64,uint64)void"
    method "approve_update(bool)void"
    method "grant_upgrader(address)void"
    method "set_delegate(address)void"
    method "participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void"
    method "transfer(address)void"
    txna ApplicationArgs 0
    match main_get_max_payout_multiplier_route@4 main_get_payout_route@5 main_set_version_route@6 main_approve_update_route@7 main_grant_upgrader_route@8 main_set_delegate_route@9 main_participate_route@10 main_transfer_route@11
    err // reject transaction

main_get_max_payout_multiplier_route@4:
    // src/src/contract.py:205
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub get_max_payout_multiplier
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_get_payout_route@5:
    // src/src/contract.py:164
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // src/src/contract.py:181-183
    // class SlotMachinePayoutModel(
    //     SlotMachinePayoutModelInterface, Upgradeable, Stakeable, Deleteable
    // ):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // src/src/contract.py:164
    // @arc4.abimethod
    callsub get_payout
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_set_version_route@6:
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:83
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // src/src/contract.py:181-183
    // class SlotMachinePayoutModel(
    //     SlotMachinePayoutModelInterface, Upgradeable, Stakeable, Deleteable
    // ):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:83
    // @arc4.abimethod
    callsub set_version
    int 1
    return

main_approve_update_route@7:
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:101
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // src/src/contract.py:181-183
    // class SlotMachinePayoutModel(
    //     SlotMachinePayoutModelInterface, Upgradeable, Stakeable, Deleteable
    // ):
    txna ApplicationArgs 1
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:101
    // @arc4.abimethod
    callsub approve_update
    int 1
    return

main_grant_upgrader_route@8:
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:107
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // src/src/contract.py:181-183
    // class SlotMachinePayoutModel(
    //     SlotMachinePayoutModelInterface, Upgradeable, Stakeable, Deleteable
    // ):
    txna ApplicationArgs 1
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:107
    // @arc4.abimethod
    callsub grant_upgrader
    int 1
    return

main_set_delegate_route@9:
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/participation/Stakable/contract.py:81
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // src/src/contract.py:181-183
    // class SlotMachinePayoutModel(
    //     SlotMachinePayoutModelInterface, Upgradeable, Stakeable, Deleteable
    // ):
    txna ApplicationArgs 1
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/participation/Stakable/contract.py:81
    // @arc4.abimethod
    callsub set_delegate
    int 1
    return

main_participate_route@10:
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/participation/Stakable/contract.py:89
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // src/src/contract.py:181-183
    // class SlotMachinePayoutModel(
    //     SlotMachinePayoutModelInterface, Upgradeable, Stakeable, Deleteable
    // ):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    txna ApplicationArgs 5
    txna ApplicationArgs 6
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/participation/Stakable/contract.py:89
    // @arc4.abimethod
    callsub participate
    int 1
    return

main_transfer_route@11:
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/access/Ownable/contract.py:22
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    int 1
    return

main_bare_routing@14:
    // src/src/contract.py:181-183
    // class SlotMachinePayoutModel(
    //     SlotMachinePayoutModelInterface, Upgradeable, Stakeable, Deleteable
    // ):
    txn OnCompletion
    switch main_create@15 main_reject_bare_on_completion@18 main_reject_bare_on_completion@18 main_reject_bare_on_completion@18 main_on_update@16 main_on_delete@17
    err // reject transaction

main_create@15:
    // src/src/contract.py:181-183
    // class SlotMachinePayoutModel(
    //     SlotMachinePayoutModelInterface, Upgradeable, Stakeable, Deleteable
    // ):
    txn ApplicationID
    !
    assert // is creating
    int 1
    return

main_on_update@16:
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:92
    // @arc4.baremethod(allow_actions=["UpdateApplication"])
    txn ApplicationID
    assert // is not creating
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:92-93
    // @arc4.baremethod(allow_actions=["UpdateApplication"])
    // def on_update(self) -> None:
    callsub on_update
    int 1
    return

main_on_delete@17:
    // src/src/contract.py:57
    // @arc4.baremethod(allow_actions=["DeleteApplication"])
    txn ApplicationID
    assert // is not creating
    // src/src/contract.py:57-58
    // @arc4.baremethod(allow_actions=["DeleteApplication"])
    // def on_delete(self) -> None:  # pragma: no cover
    callsub on_delete
    int 1
    return

main_reject_bare_on_completion@18:
    // src/src/contract.py:181-183
    // class SlotMachinePayoutModel(
    //     SlotMachinePayoutModelInterface, Upgradeable, Stakeable, Deleteable
    // ):
    err // reject transaction


// contract.SlotMachinePayoutModel.get_max_payout_multiplier() -> bytes:
get_max_payout_multiplier:
    // src/src/contract.py:205-206
    // @arc4.abimethod
    // def get_max_payout_multiplier(self) -> arc4.UInt64:
    proto 0 1
    // src/src/contract.py:210
    // return arc4.UInt64(self.max_payout_multiplier)
    int 0
    // src/src/contract.py:201-202
    // # payout model state
    // self.max_payout_multiplier = UInt64(100)
    byte "max_payout_multiplier"
    // src/src/contract.py:210
    // return arc4.UInt64(self.max_payout_multiplier)
    app_global_get_ex
    assert // check self.max_payout_multiplier exists
    itob
    retsub


// contract.SlotMachinePayoutModelInterface.get_payout(bet_amount: bytes, r: bytes) -> bytes:
get_payout:
    // src/src/contract.py:164-165
    // @arc4.abimethod
    // def get_payout(self, bet_amount: arc4.UInt64, r: arc4.UInt64) -> arc4.UInt64:
    proto 2 1
    // src/src/contract.py:169
    // return arc4.UInt64(self._calculate_bet_payout(bet_amount.native, r.native))
    frame_dig -2
    btoi
    frame_dig -1
    btoi
    callsub _calculate_bet_payout
    itob
    retsub


// contract.SlotMachinePayoutModel._calculate_bet_payout(bet_amount: uint64, r: uint64) -> uint64:
_calculate_bet_payout:
    // src/src/contract.py:212-213
    // @subroutine
    // def _calculate_bet_payout(self, bet_amount: UInt64, r: UInt64) -> UInt64:
    proto 2 1
    byte ""
    dup
    // src/src/contract.py:236
    // for index in urange(6):
    int 0

_calculate_bet_payout_for_header@1:
    // src/src/contract.py:236
    // for index in urange(6):
    frame_dig 2
    int 6
    <
    bz _calculate_bet_payout_after_for@6
    // src/src/contract.py:237
    // prob = probabilities[index].native
    frame_dig 2
    int 8
    *
    dup
    frame_bury 0
    // src/src/contract.py:227-234
    // probabilities = arc4.StaticArray(
    //     arc4.UInt64(82_758),  # ~0.00008275862069
    //     arc4.UInt64(1_655_172),  # ~0.001655172414
    //     arc4.UInt64(8_275_862),  # ~0.008275862069
    //     arc4.UInt64(16_551_724),  # ~0.01655172414
    //     arc4.UInt64(41_379_310),  # ~0.04137931034
    //     arc4.UInt64(165_517_241),  # ~0.1655172414
    // )
    byte 0x0000000000014346000000000019418400000000007e47960000000000fc8f2c00000000027765ee0000000009dd97b9
    // src/src/contract.py:237
    // prob = probabilities[index].native
    swap
    int 8
    extract3 // on error: Index access is out of bounds
    btoi
    dup
    frame_bury 1
    // src/src/contract.py:238
    // if r < prob:
    frame_dig -1
    >
    bz _calculate_bet_payout_after_if_else@4
    // src/src/contract.py:219-226
    // multipliers = arc4.StaticArray(
    //     arc4.UInt64(100),  # 100x
    //     arc4.UInt64(50),  # 50x
    //     arc4.UInt64(20),  # 20x
    //     arc4.UInt64(10),  # 10x
    //     arc4.UInt64(5),  # 5x
    //     arc4.UInt64(2),  # 2x
    // )
    byte 0x000000000000006400000000000000320000000000000014000000000000000a00000000000000050000000000000002
    // src/src/contract.py:239
    // return bet_amount * multipliers[index].native
    frame_dig 0
    int 8
    extract3 // on error: Index access is out of bounds
    btoi
    frame_dig -2
    *
    frame_bury 0
    retsub

_calculate_bet_payout_after_if_else@4:
    // src/src/contract.py:240
    // r -= prob
    frame_dig -1
    frame_dig 1
    -
    frame_bury -1
    // src/src/contract.py:236
    // for index in urange(6):
    frame_dig 2
    int 1
    +
    frame_bury 2
    b _calculate_bet_payout_for_header@1

_calculate_bet_payout_after_for@6:
    // src/src/contract.py:242
    // return UInt64(0)
    int 0
    frame_bury 0
    retsub


// opensubmarine.contracts.update.Upgradeable.contract.Upgradeable.set_version(contract_version: bytes, deployment_version: bytes) -> void:
set_version:
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:83-86
    // @arc4.abimethod
    // def set_version(
    //     self, contract_version: arc4.UInt64, deployment_version: arc4.UInt64
    // ) -> None:
    proto 2 0
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:87
    // assert Txn.sender == self.upgrader, "must be upgrader"
    txn Sender
    int 0
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:34
    // self.upgrader = Account()
    byte "upgrader"
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:87
    // assert Txn.sender == self.upgrader, "must be upgrader"
    app_global_get_ex
    assert // check self.upgrader exists
    ==
    assert // must be upgrader
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:88
    // arc4.emit(VersionUpdated(contract_version, deployment_version))
    frame_dig -2
    frame_dig -1
    concat
    method "VersionUpdated(uint64,uint64)"
    swap
    concat
    log
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:89
    // self.contract_version = contract_version.native
    frame_dig -2
    btoi
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:31
    // self.contract_version = UInt64()
    byte "contract_version"
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:89
    // self.contract_version = contract_version.native
    swap
    app_global_put
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:90
    // self.deployment_version = deployment_version.native
    frame_dig -1
    btoi
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:32
    // self.deployment_version = UInt64()
    byte "deployment_version"
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:90
    // self.deployment_version = deployment_version.native
    swap
    app_global_put
    retsub


// opensubmarine.contracts.update.Upgradeable.contract.Upgradeable.approve_update(approval: bytes) -> void:
approve_update:
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:101-102
    // @arc4.abimethod
    // def approve_update(self, approval: arc4.Bool) -> None:
    proto 1 0
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:103
    // assert Txn.sender == self.owner, "must be owner"
    txn Sender
    int 0
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/access/Ownable/contract.py:20
    // self.owner = Account()
    byte "owner"
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:103
    // assert Txn.sender == self.owner, "must be owner"
    app_global_get_ex
    assert // check self.owner exists
    ==
    assert // must be owner
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:104
    // arc4.emit(UpdateApproved(arc4.Address(self.owner), approval))
    int 0
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/access/Ownable/contract.py:20
    // self.owner = Account()
    byte "owner"
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:104
    // arc4.emit(UpdateApproved(arc4.Address(self.owner), approval))
    app_global_get_ex
    assert // check self.owner exists
    frame_dig -1
    concat
    method "UpdateApproved(address,bool)"
    swap
    concat
    log
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:105
    // self.updatable = approval.native
    frame_dig -1
    int 0
    getbit
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:33
    // self.updatable = bool(1)
    byte "updatable"
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:105
    // self.updatable = approval.native
    swap
    app_global_put
    retsub


// opensubmarine.contracts.update.Upgradeable.contract.Upgradeable.grant_upgrader(upgrader: bytes) -> void:
grant_upgrader:
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:107-108
    // @arc4.abimethod
    // def grant_upgrader(self, upgrader: arc4.Address) -> None:
    proto 1 0
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:109
    // assert Txn.sender == Global.creator_address, "must be creator"
    txn Sender
    global CreatorAddress
    ==
    assert // must be creator
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:110
    // arc4.emit(UpgraderGranted(arc4.Address(self.upgrader), upgrader))
    int 0
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:34
    // self.upgrader = Account()
    byte "upgrader"
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:110
    // arc4.emit(UpgraderGranted(arc4.Address(self.upgrader), upgrader))
    app_global_get_ex
    assert // check self.upgrader exists
    frame_dig -1
    concat
    method "UpgraderGranted(address,address)"
    swap
    concat
    log
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:34
    // self.upgrader = Account()
    byte "upgrader"
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:111
    // self.upgrader = upgrader.native
    frame_dig -1
    app_global_put
    retsub


// opensubmarine.contracts.participation.Stakable.contract.Stakeable.set_delegate(delegate: bytes) -> void:
set_delegate:
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/participation/Stakable/contract.py:81-82
    // @arc4.abimethod
    // def set_delegate(self, delegate: arc4.Address) -> None:
    proto 1 0
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/participation/Stakable/contract.py:84
    // Txn.sender == self.owner or Txn.sender == Global.creator_address
    txn Sender
    int 0
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/access/Ownable/contract.py:20
    // self.owner = Account()
    byte "owner"
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/participation/Stakable/contract.py:84
    // Txn.sender == self.owner or Txn.sender == Global.creator_address
    app_global_get_ex
    assert // check self.owner exists
    ==
    bnz set_delegate_bool_true@2
    txn Sender
    global CreatorAddress
    ==
    bz set_delegate_bool_false@3

set_delegate_bool_true@2:
    int 1
    b set_delegate_bool_merge@4

set_delegate_bool_false@3:
    int 0

set_delegate_bool_merge@4:
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/participation/Stakable/contract.py:83-85
    // assert (
    //     Txn.sender == self.owner or Txn.sender == Global.creator_address
    // ), "must be owner or creator"
    assert // must be owner or creator
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/participation/Stakable/contract.py:86
    // arc4.emit(DelegateUpdated(arc4.Address(self.delegate), delegate))
    int 0
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/participation/Stakable/contract.py:47
    // self.delegate = Account()
    byte "delegate"
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/participation/Stakable/contract.py:86
    // arc4.emit(DelegateUpdated(arc4.Address(self.delegate), delegate))
    app_global_get_ex
    assert // check self.delegate exists
    frame_dig -1
    concat
    method "DelegateUpdated(address,address)"
    swap
    concat
    log
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/participation/Stakable/contract.py:47
    // self.delegate = Account()
    byte "delegate"
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/participation/Stakable/contract.py:87
    // self.delegate = delegate.native
    frame_dig -1
    app_global_put
    retsub


// opensubmarine.contracts.participation.Stakable.contract.Stakeable.participate(vote_k: bytes, sel_k: bytes, vote_fst: bytes, vote_lst: bytes, vote_kd: bytes, sp_key: bytes) -> void:
participate:
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/participation/Stakable/contract.py:89-98
    // @arc4.abimethod
    // def participate(
    //     self,
    //     vote_k: Bytes32,
    //     sel_k: Bytes32,
    //     vote_fst: arc4.UInt64,
    //     vote_lst: arc4.UInt64,
    //     vote_kd: arc4.UInt64,
    //     sp_key: Bytes64,
    // ) -> None:
    proto 6 0
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/participation/Stakable/contract.py:101
    // Txn.sender == self.owner or Txn.sender == self.delegate
    txn Sender
    int 0
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/access/Ownable/contract.py:20
    // self.owner = Account()
    byte "owner"
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/participation/Stakable/contract.py:101
    // Txn.sender == self.owner or Txn.sender == self.delegate
    app_global_get_ex
    assert // check self.owner exists
    ==
    bnz participate_bool_true@2
    txn Sender
    int 0
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/participation/Stakable/contract.py:47
    // self.delegate = Account()
    byte "delegate"
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/participation/Stakable/contract.py:101
    // Txn.sender == self.owner or Txn.sender == self.delegate
    app_global_get_ex
    assert // check self.delegate exists
    ==
    bz participate_bool_false@3

participate_bool_true@2:
    int 1
    b participate_bool_merge@4

participate_bool_false@3:
    int 0

participate_bool_merge@4:
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/participation/Stakable/contract.py:99-102
    // ###########################################
    // assert (
    //     Txn.sender == self.owner or Txn.sender == self.delegate
    // ), "must be owner or delegate"
    assert // must be owner or delegate
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/participation/Stakable/contract.py:103-104
    // ###########################################
    // key_reg_fee = Global.min_txn_fee
    global MinTxnFee
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/participation/Stakable/contract.py:105-106
    // # require payment of min fee to prevent draining
    // assert require_payment(Txn.sender) == key_reg_fee, "payment amout accurate"
    txn Sender
    callsub require_payment
    dig 1
    ==
    assert // payment amout accurate
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/participation/Stakable/contract.py:110
    // arc4.Address(Txn.sender),
    txn Sender
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/participation/Stakable/contract.py:112
    // address=arc4.Address(Txn.sender),
    dup
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/participation/Stakable/contract.py:111-119
    // PartKeyInfo(
    //     address=arc4.Address(Txn.sender),
    //     vote_key=vote_k,
    //     selection_key=sel_k,
    //     vote_first=vote_fst,
    //     vote_last=vote_lst,
    //     vote_key_dilution=vote_kd,
    //     state_proof_key=sp_key,
    // ),
    frame_dig -6
    concat
    frame_dig -5
    concat
    frame_dig -4
    concat
    frame_dig -3
    concat
    frame_dig -2
    concat
    frame_dig -1
    concat
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/participation/Stakable/contract.py:109-120
    // Participated(
    //     arc4.Address(Txn.sender),
    //     PartKeyInfo(
    //         address=arc4.Address(Txn.sender),
    //         vote_key=vote_k,
    //         selection_key=sel_k,
    //         vote_first=vote_fst,
    //         vote_last=vote_lst,
    //         vote_key_dilution=vote_kd,
    //         state_proof_key=sp_key,
    //     ),
    // )
    concat
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/participation/Stakable/contract.py:107-121
    // ###########################################
    // arc4.emit(
    //     Participated(
    //         arc4.Address(Txn.sender),
    //         PartKeyInfo(
    //             address=arc4.Address(Txn.sender),
    //             vote_key=vote_k,
    //             selection_key=sel_k,
    //             vote_first=vote_fst,
    //             vote_last=vote_lst,
    //             vote_key_dilution=vote_kd,
    //             state_proof_key=sp_key,
    //         ),
    //     )
    // )
    method "Participated(address,(address,byte[32],byte[32],uint64,uint64,uint64,byte[64]))"
    swap
    concat
    log
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/participation/Stakable/contract.py:122-130
    // itxn.KeyRegistration(
    //     vote_key=vote_k.bytes,
    //     selection_key=sel_k.bytes,
    //     vote_first=vote_fst.native,
    //     vote_last=vote_lst.native,
    //     vote_key_dilution=vote_kd.native,
    //     state_proof_key=sp_key.bytes,
    //     fee=key_reg_fee,
    // ).submit()
    itxn_begin
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/participation/Stakable/contract.py:125
    // vote_first=vote_fst.native,
    frame_dig -4
    btoi
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/participation/Stakable/contract.py:126
    // vote_last=vote_lst.native,
    frame_dig -3
    btoi
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/participation/Stakable/contract.py:127
    // vote_key_dilution=vote_kd.native,
    frame_dig -2
    btoi
    frame_dig -1
    itxn_field StateProofPK
    itxn_field VoteKeyDilution
    itxn_field VoteLast
    itxn_field VoteFirst
    frame_dig -5
    itxn_field SelectionPK
    frame_dig -6
    itxn_field VotePK
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/participation/Stakable/contract.py:122
    // itxn.KeyRegistration(
    int keyreg
    itxn_field TypeEnum
    itxn_field Fee
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/participation/Stakable/contract.py:122-130
    // itxn.KeyRegistration(
    //     vote_key=vote_k.bytes,
    //     selection_key=sel_k.bytes,
    //     vote_first=vote_fst.native,
    //     vote_last=vote_lst.native,
    //     vote_key_dilution=vote_kd.native,
    //     state_proof_key=sp_key.bytes,
    //     fee=key_reg_fee,
    // ).submit()
    itxn_submit
    retsub


// opensubmarine.utils.algorand.require_payment(who: bytes) -> uint64:
require_payment:
    // usr/local/lib/python3.12/site-packages/opensubmarine/utils/algorand.py:15-23
    // ##############################################
    // # function: require_payment (internal)
    // # arguments: None
    // # purpose: check payment
    // # pre-conditions: None
    // # post-conditions: None
    // ##############################################
    // @subroutine
    // def require_payment(who: Account) -> UInt64:
    proto 1 1
    // usr/local/lib/python3.12/site-packages/opensubmarine/utils/algorand.py:24
    // ref_group_index = Txn.group_index
    txn GroupIndex
    // usr/local/lib/python3.12/site-packages/opensubmarine/utils/algorand.py:25
    // assert ref_group_index > 0, "group index greater than zero"
    dup
    assert // group index greater than zero
    // usr/local/lib/python3.12/site-packages/opensubmarine/utils/algorand.py:26
    // payment_group_index = ref_group_index - 1
    int 1
    -
    // usr/local/lib/python3.12/site-packages/opensubmarine/utils/algorand.py:28
    // gtxn.PaymentTransaction(payment_group_index).sender == who
    dup
    gtxns TypeEnum
    int pay
    ==
    assert // transaction type is pay
    dup
    gtxns Sender
    frame_dig -1
    ==
    // usr/local/lib/python3.12/site-packages/opensubmarine/utils/algorand.py:27-29
    // assert (
    //     gtxn.PaymentTransaction(payment_group_index).sender == who
    // ), "payment sender accurate"
    assert // payment sender accurate
    // usr/local/lib/python3.12/site-packages/opensubmarine/utils/algorand.py:31
    // gtxn.PaymentTransaction(payment_group_index).receiver
    dup
    gtxns Receiver
    // usr/local/lib/python3.12/site-packages/opensubmarine/utils/algorand.py:32
    // == Global.current_application_address
    global CurrentApplicationAddress
    // usr/local/lib/python3.12/site-packages/opensubmarine/utils/algorand.py:31-32
    // gtxn.PaymentTransaction(payment_group_index).receiver
    // == Global.current_application_address
    ==
    // usr/local/lib/python3.12/site-packages/opensubmarine/utils/algorand.py:30-33
    // assert (
    //     gtxn.PaymentTransaction(payment_group_index).receiver
    //     == Global.current_application_address
    // ), "payment receiver accurate"
    assert // payment receiver accurate
    // usr/local/lib/python3.12/site-packages/opensubmarine/utils/algorand.py:34
    // return gtxn.PaymentTransaction(payment_group_index).amount
    gtxns Amount
    retsub


// opensubmarine.contracts.update.Upgradeable.contract.Upgradeable.on_update() -> void:
on_update:
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:92-93
    // @arc4.baremethod(allow_actions=["UpdateApplication"])
    // def on_update(self) -> None:
    proto 0 0
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:94-97
    // ##########################################
    // # WARNING: This app can be updated by the creator
    // ##########################################
    // assert Txn.sender == self.upgrader, "must be upgrader"
    txn Sender
    int 0
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:34
    // self.upgrader = Account()
    byte "upgrader"
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:94-97
    // ##########################################
    // # WARNING: This app can be updated by the creator
    // ##########################################
    // assert Txn.sender == self.upgrader, "must be upgrader"
    app_global_get_ex
    assert // check self.upgrader exists
    ==
    assert // must be upgrader
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:98
    // assert self.updatable == UInt64(1), "not approved"
    int 0
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:33
    // self.updatable = bool(1)
    byte "updatable"
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:98
    // assert self.updatable == UInt64(1), "not approved"
    app_global_get_ex
    assert // check self.updatable exists
    int 1
    ==
    assert // not approved
    retsub


// contract.Deleteable.on_delete() -> void:
on_delete:
    // src/src/contract.py:57-58
    // @arc4.baremethod(allow_actions=["DeleteApplication"])
    // def on_delete(self) -> None:  # pragma: no cover
    proto 0 0
    // src/src/contract.py:59-62
    // ##########################################
    // # WARNING: This app can be deleted by the creator (Development)
    // ##########################################
    // assert Txn.sender == Global.creator_address, "must be creator"
    txn Sender
    global CreatorAddress
    ==
    assert // must be creator
    // src/src/contract.py:63
    // assert self.deletable == UInt64(1), "not approved"
    int 0
    // src/src/contract.py:43
    // self.deletable = bool(1)
    byte "deletable"
    // src/src/contract.py:63
    // assert self.deletable == UInt64(1), "not approved"
    app_global_get_ex
    assert // check self.deletable exists
    int 1
    ==
    assert // not approved
    retsub


// contract.SlotMachinePayoutModel.__init__() -> void:
__init__:
    // src/src/contract.py:188
    // def __init__(self) -> None:
    proto 0 0
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/access/Ownable/contract.py:20
    // self.owner = Account()
    byte "owner"
    // src/src/contract.py:189-190
    // # ownable state
    // self.owner = Global.creator_address
    global CreatorAddress
    app_global_put
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/participation/Stakable/contract.py:47
    // self.delegate = Account()
    byte "delegate"
    // src/src/contract.py:191-192
    // # stakeable state
    // self.delegate = Account()  # zero address
    global ZeroAddress
    app_global_put
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/participation/Stakable/contract.py:48
    // self.stakeable = bool(1)
    byte "stakeable"
    // src/src/contract.py:193
    // self.stakeable = bool(1)  # 1 (Default unlocked)
    int 1
    app_global_put
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:34
    // self.upgrader = Account()
    byte "upgrader"
    // src/src/contract.py:194-195
    // # upgradable state
    // self.upgrader = Global.creator_address
    global CreatorAddress
    app_global_put
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:31
    // self.contract_version = UInt64()
    byte "contract_version"
    // src/src/contract.py:196
    // self.contract_version = UInt64()
    int 0
    app_global_put
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:32
    // self.deployment_version = UInt64()
    byte "deployment_version"
    // src/src/contract.py:197
    // self.deployment_version = UInt64()
    int 0
    app_global_put
    // usr/local/lib/python3.12/site-packages/opensubmarine/contracts/update/Upgradeable/contract.py:33
    // self.updatable = bool(1)
    byte "updatable"
    // src/src/contract.py:198
    // self.updatable = bool(1)
    int 1
    app_global_put
    // src/src/contract.py:43
    // self.deletable = bool(1)
    byte "deletable"
    // src/src/contract.py:199-200
    // # deleteable state
    // self.deletable = bool(1)
    int 1
    app_global_put
    // src/src/contract.py:201-202
    // # payout model state
    // self.max_payout_multiplier = UInt64(100)
    byte "max_payout_multiplier"
    int 100
    app_global_put
    retsub
