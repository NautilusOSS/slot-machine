{
    "hints": {
        "post_upgrade()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_block_seed(uint64)byte[32]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "deposit()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withdraw(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_bet_key(address,uint64,uint64,uint64)byte[56]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_max_bet()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "spin(uint64,uint64,uint64)byte[56]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "claim(byte[56])uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_version(uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "approve_update(bool)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "grant_upgrader(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "transfer(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpjb250cmFjdC5TbG90TWFjaGluZS5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo2NwogICAgLy8gY2xhc3MgU2xvdE1hY2hpbmUoVXBncmFkZWFibGUpOgogICAgaW50IDEKICAgIHJldHVybgo="
    },
    "state": {
        "global": {
            "num_byte_slices": 2,
            "num_uints": 10
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "balance_available": {
                    "type": "uint64",
                    "key": "balance_available"
                },
                "balance_locked": {
                    "type": "uint64",
                    "key": "balance_locked"
                },
                "balance_total": {
                    "type": "uint64",
                    "key": "balance_total"
                },
                "base_house_edge_bps": {
                    "type": "uint64",
                    "key": "base_house_edge_bps"
                },
                "contract_version": {
                    "type": "uint64",
                    "key": "contract_version"
                },
                "deployment_version": {
                    "type": "uint64",
                    "key": "deployment_version"
                },
                "max_house_edge_bps": {
                    "type": "uint64",
                    "key": "max_house_edge_bps"
                },
                "min_bet_amount": {
                    "type": "uint64",
                    "key": "min_bet_amount"
                },
                "min_house_edge_bps": {
                    "type": "uint64",
                    "key": "min_house_edge_bps"
                },
                "owner": {
                    "type": "bytes",
                    "key": "owner"
                },
                "updatable": {
                    "type": "uint64",
                    "key": "updatable"
                },
                "upgrader": {
                    "type": "bytes",
                    "key": "upgrader"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "SlotMachine",
        "desc": "\n    A simple slot machine smart contract\n    ",
        "methods": [
            {
                "name": "post_upgrade",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Called after upgrade"
            },
            {
                "name": "get_block_seed",
                "args": [
                    {
                        "type": "uint64",
                        "name": "round"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "byte[32]"
                }
            },
            {
                "name": "deposit",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Deposit funds into the contract"
            },
            {
                "name": "withdraw",
                "args": [
                    {
                        "type": "uint64",
                        "name": "amount",
                        "desc": "The amount of funds to withdraw in atomic units"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Withdraw funds from the contract\nOnly callable by contract owner"
            },
            {
                "name": "get_bet_key",
                "args": [
                    {
                        "type": "address",
                        "name": "address"
                    },
                    {
                        "type": "uint64",
                        "name": "amount"
                    },
                    {
                        "type": "uint64",
                        "name": "round"
                    },
                    {
                        "type": "uint64",
                        "name": "index"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "byte[56]"
                }
            },
            {
                "name": "get_max_bet",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                },
                "desc": "Get the maximum bet amount"
            },
            {
                "name": "spin",
                "args": [
                    {
                        "type": "uint64",
                        "name": "bet_amount"
                    },
                    {
                        "type": "uint64",
                        "name": "index",
                        "desc": "Used to determine which 8 bytes of the block seed to use."
                    },
                    {
                        "type": "uint64",
                        "name": "future_round_offset"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "byte[56]",
                    "desc": "r (uint): The round number of the spin."
                },
                "desc": "Spin the slot machine. Outcome is determined by the seed\nof future round."
            },
            {
                "name": "claim",
                "args": [
                    {
                        "type": "byte[56]",
                        "name": "bet_key",
                        "desc": "The key of the bet to claim"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64",
                    "desc": "The payout for the bet"
                },
                "desc": "Claim a bet"
            },
            {
                "name": "set_version",
                "args": [
                    {
                        "type": "uint64",
                        "name": "contract_version"
                    },
                    {
                        "type": "uint64",
                        "name": "deployment_version"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "approve_update",
                "args": [
                    {
                        "type": "bool",
                        "name": "approval"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "grant_upgrader",
                "args": [
                    {
                        "type": "address",
                        "name": "upgrader"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "transfer",
                "args": [
                    {
                        "type": "address",
                        "name": "new_owner"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event."
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "update_application": "CALL",
        "no_op": "CREATE"
    }
}