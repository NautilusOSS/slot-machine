{
    "hints": {
        "post_upgrade()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_payout_model(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_min_bet_amount(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_max_bet_amount(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "burn_upgreadable_fuse()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "burn_stakeable_fuse()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "burn_deletable_fuse()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "deposit()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withdraw(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_balance_available()uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_balance_locked()uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_balance_total()uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_bet_key(address,uint64,uint64,uint64)byte[56]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "kill()void": {
            "call_config": {
                "delete_application": "CALL"
            }
        },
        "spin(uint64,uint64)byte[56]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "claim(byte[56])uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_version(uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "approve_update(bool)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "grant_upgrader(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_delegate(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "transfer(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpjb250cmFjdC5TbG90TWFjaGluZS5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTozNzIKICAgIC8vIGNsYXNzIFNsb3RNYWNoaW5lKFNsb3RNYWNoaW5lSW50ZXJmYWNlLCBVcGdyYWRlYWJsZSwgU3Rha2VhYmxlLCBEZWxldGVhYmxlKToKICAgIGludCAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 3,
            "num_uints": 11
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "balance_available": {
                    "type": "uint64",
                    "key": "balance_available"
                },
                "balance_locked": {
                    "type": "uint64",
                    "key": "balance_locked"
                },
                "balance_total": {
                    "type": "uint64",
                    "key": "balance_total"
                },
                "contract_version": {
                    "type": "uint64",
                    "key": "contract_version"
                },
                "delegate": {
                    "type": "bytes",
                    "key": "delegate"
                },
                "deletable": {
                    "type": "uint64",
                    "key": "deletable"
                },
                "deployment_version": {
                    "type": "uint64",
                    "key": "deployment_version"
                },
                "max_bet_amount": {
                    "type": "uint64",
                    "key": "max_bet_amount"
                },
                "min_bet_amount": {
                    "type": "uint64",
                    "key": "min_bet_amount"
                },
                "owner": {
                    "type": "bytes",
                    "key": "owner"
                },
                "payout_model": {
                    "type": "uint64",
                    "key": "payout_model"
                },
                "stakeable": {
                    "type": "uint64",
                    "key": "stakeable"
                },
                "updatable": {
                    "type": "uint64",
                    "key": "updatable"
                },
                "upgrader": {
                    "type": "bytes",
                    "key": "upgrader"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "SlotMachine",
        "desc": "\n    A simple slot machine smart contract\n    ",
        "methods": [
            {
                "name": "post_upgrade",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Called after upgrade"
            },
            {
                "name": "set_payout_model",
                "args": [
                    {
                        "type": "uint64",
                        "name": "app_id"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Set the payout model"
            },
            {
                "name": "set_min_bet_amount",
                "args": [
                    {
                        "type": "uint64",
                        "name": "min_bet_amount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Set the minimum bet amount"
            },
            {
                "name": "set_max_bet_amount",
                "args": [
                    {
                        "type": "uint64",
                        "name": "max_bet_amount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Set the maximum bet amount"
            },
            {
                "name": "burn_upgreadable_fuse",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Burn the upgradeable fuse"
            },
            {
                "name": "burn_stakeable_fuse",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Burn the stakeable fuse"
            },
            {
                "name": "burn_deletable_fuse",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Burn the deletable fuse"
            },
            {
                "name": "deposit",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Deposit funds into the contract"
            },
            {
                "name": "withdraw",
                "args": [
                    {
                        "type": "uint64",
                        "name": "amount",
                        "desc": "The amount of funds to withdraw in atomic units"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Withdraw funds from the contract\nOnly callable by contract owner"
            },
            {
                "name": "get_balance_available",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint64"
                },
                "desc": "Get the available balance"
            },
            {
                "name": "get_balance_locked",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint64"
                },
                "desc": "Get the locked balance"
            },
            {
                "name": "get_balance_total",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint64"
                },
                "desc": "Get the total balance"
            },
            {
                "name": "get_bet_key",
                "args": [
                    {
                        "type": "address",
                        "name": "address"
                    },
                    {
                        "type": "uint64",
                        "name": "amount"
                    },
                    {
                        "type": "uint64",
                        "name": "round"
                    },
                    {
                        "type": "uint64",
                        "name": "index"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "byte[56]"
                }
            },
            {
                "name": "kill",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Kill the contract"
            },
            {
                "name": "spin",
                "args": [
                    {
                        "type": "uint64",
                        "name": "bet_amount"
                    },
                    {
                        "type": "uint64",
                        "name": "index",
                        "desc": "Player's choice of index."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "byte[56]",
                    "desc": "r (uint): The round number of the spin."
                },
                "desc": "Spin the slot machine. Outcome is determined by the seed\nof future round."
            },
            {
                "name": "claim",
                "args": [
                    {
                        "type": "byte[56]",
                        "name": "bet_key",
                        "desc": "The key of the bet to claim"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64",
                    "desc": "The payout for the bet"
                },
                "desc": "Claim a bet"
            },
            {
                "name": "set_version",
                "args": [
                    {
                        "type": "uint64",
                        "name": "contract_version"
                    },
                    {
                        "type": "uint64",
                        "name": "deployment_version"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "approve_update",
                "args": [
                    {
                        "type": "bool",
                        "name": "approval"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "grant_upgrader",
                "args": [
                    {
                        "type": "address",
                        "name": "upgrader"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "set_delegate",
                "args": [
                    {
                        "type": "address",
                        "name": "delegate"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "participate",
                "args": [
                    {
                        "type": "byte[32]",
                        "name": "vote_k"
                    },
                    {
                        "type": "byte[32]",
                        "name": "sel_k"
                    },
                    {
                        "type": "uint64",
                        "name": "vote_fst"
                    },
                    {
                        "type": "uint64",
                        "name": "vote_lst"
                    },
                    {
                        "type": "uint64",
                        "name": "vote_kd"
                    },
                    {
                        "type": "byte[64]",
                        "name": "sp_key"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "transfer",
                "args": [
                    {
                        "type": "address",
                        "name": "new_owner"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event."
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "update_application": "CALL",
        "delete_application": "CALL",
        "no_op": "CREATE"
    }
}