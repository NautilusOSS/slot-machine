/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "post_upgrade()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_min_bank_amount(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_payout_model(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_min_bet_amount(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_max_bet_amount(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "burn_upgreadable_fuse()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "burn_stakeable_fuse()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "burn_deletable_fuse()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deposit()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "withdraw(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_balance_available()uint64": {
      "read_only": true,
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_balance_locked()uint64": {
      "read_only": true,
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_balance_total()uint64": {
      "read_only": true,
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_bet_key(address,uint64,uint64,uint64)byte[56]": {
      "read_only": true,
      "call_config": {
        "no_op": "CALL"
      }
    },
    "kill()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    },
    "spin(uint64,uint64)byte[56]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "claim(byte[56])uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_version(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "approve_update(bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "grant_upgrader(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_delegate(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "transfer(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpjb250cmFjdC5TbG90TWFjaGluZS5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTozNTkKICAgIC8vIGNsYXNzIFNsb3RNYWNoaW5lKFNsb3RNYWNoaW5lSW50ZXJmYWNlLCBVcGdyYWRlYWJsZSwgU3Rha2VhYmxlLCBEZWxldGVhYmxlKToKICAgIGludCAxCiAgICByZXR1cm4K"
  },
  "state": {
    "global": {
      "num_byte_slices": 3,
      "num_uints": 12
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {
        "balance_available": {
          "type": "uint64",
          "key": "balance_available"
        },
        "balance_locked": {
          "type": "uint64",
          "key": "balance_locked"
        },
        "balance_total": {
          "type": "uint64",
          "key": "balance_total"
        },
        "contract_version": {
          "type": "uint64",
          "key": "contract_version"
        },
        "delegate": {
          "type": "bytes",
          "key": "delegate"
        },
        "deletable": {
          "type": "uint64",
          "key": "deletable"
        },
        "deployment_version": {
          "type": "uint64",
          "key": "deployment_version"
        },
        "max_bet_amount": {
          "type": "uint64",
          "key": "max_bet_amount"
        },
        "min_bank_amount": {
          "type": "uint64",
          "key": "min_bank_amount"
        },
        "min_bet_amount": {
          "type": "uint64",
          "key": "min_bet_amount"
        },
        "owner": {
          "type": "bytes",
          "key": "owner"
        },
        "payout_model": {
          "type": "uint64",
          "key": "payout_model"
        },
        "stakeable": {
          "type": "uint64",
          "key": "stakeable"
        },
        "updatable": {
          "type": "uint64",
          "key": "updatable"
        },
        "upgrader": {
          "type": "bytes",
          "key": "upgrader"
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "SlotMachine",
    "desc": "\n    A simple slot machine smart contract\n    ",
    "methods": [
      {
        "name": "post_upgrade",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Called after upgrade"
      },
      {
        "name": "set_min_bank_amount",
        "args": [
          {
            "type": "uint64",
            "name": "min_bank_amount"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Set the minimum bank amount"
      },
      {
        "name": "set_payout_model",
        "args": [
          {
            "type": "uint64",
            "name": "app_id"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Set the payout model"
      },
      {
        "name": "set_min_bet_amount",
        "args": [
          {
            "type": "uint64",
            "name": "min_bet_amount"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Set the minimum bet amount"
      },
      {
        "name": "set_max_bet_amount",
        "args": [
          {
            "type": "uint64",
            "name": "max_bet_amount"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Set the maximum bet amount"
      },
      {
        "name": "burn_upgreadable_fuse",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Burn the upgradeable fuse"
      },
      {
        "name": "burn_stakeable_fuse",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Burn the stakeable fuse"
      },
      {
        "name": "burn_deletable_fuse",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Burn the deletable fuse"
      },
      {
        "name": "deposit",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Deposit funds into the contract"
      },
      {
        "name": "withdraw",
        "args": [
          {
            "type": "uint64",
            "name": "amount",
            "desc": "The amount of funds to withdraw in atomic units"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Withdraw funds from the contract\nOnly callable by contract owner"
      },
      {
        "name": "get_balance_available",
        "args": [],
        "readonly": true,
        "returns": {
          "type": "uint64"
        },
        "desc": "Get the available balance"
      },
      {
        "name": "get_balance_locked",
        "args": [],
        "readonly": true,
        "returns": {
          "type": "uint64"
        },
        "desc": "Get the locked balance"
      },
      {
        "name": "get_balance_total",
        "args": [],
        "readonly": true,
        "returns": {
          "type": "uint64"
        },
        "desc": "Get the total balance"
      },
      {
        "name": "get_bet_key",
        "args": [
          {
            "type": "address",
            "name": "address"
          },
          {
            "type": "uint64",
            "name": "amount"
          },
          {
            "type": "uint64",
            "name": "round"
          },
          {
            "type": "uint64",
            "name": "index"
          }
        ],
        "readonly": true,
        "returns": {
          "type": "byte[56]"
        }
      },
      {
        "name": "kill",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Kill the contract"
      },
      {
        "name": "spin",
        "args": [
          {
            "type": "uint64",
            "name": "bet_amount"
          },
          {
            "type": "uint64",
            "name": "index",
            "desc": "Player's choice of index."
          }
        ],
        "readonly": false,
        "returns": {
          "type": "byte[56]",
          "desc": "r (uint): The round number of the spin."
        },
        "desc": "Spin the slot machine. Outcome is determined by the seed\nof future round."
      },
      {
        "name": "claim",
        "args": [
          {
            "type": "byte[56]",
            "name": "bet_key",
            "desc": "The key of the bet to claim"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "uint64",
          "desc": "The payout for the bet"
        },
        "desc": "Claim a bet"
      },
      {
        "name": "set_version",
        "args": [
          {
            "type": "uint64",
            "name": "contract_version"
          },
          {
            "type": "uint64",
            "name": "deployment_version"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "approve_update",
        "args": [
          {
            "type": "bool",
            "name": "approval"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "grant_upgrader",
        "args": [
          {
            "type": "address",
            "name": "upgrader"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "set_delegate",
        "args": [
          {
            "type": "address",
            "name": "delegate"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "participate",
        "args": [
          {
            "type": "byte[32]",
            "name": "vote_k"
          },
          {
            "type": "byte[32]",
            "name": "sel_k"
          },
          {
            "type": "uint64",
            "name": "vote_fst"
          },
          {
            "type": "uint64",
            "name": "vote_lst"
          },
          {
            "type": "uint64",
            "name": "vote_kd"
          },
          {
            "type": "byte[64]",
            "name": "sp_key"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "transfer",
        "args": [
          {
            "type": "address",
            "name": "new_owner"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event."
      }
    ],
    "networks": {}
  },
  "bare_call_config": {
    "update_application": "CALL",
    "delete_application": "CALL",
    "no_op": "CREATE"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

/**
 * Defines the types of available calls and state of the SlotMachine smart contract.
 */
export type SlotMachine = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'post_upgrade()void' | 'post_upgrade', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'set_min_bank_amount(uint64)void' | 'set_min_bank_amount', {
      argsObj: {
        minBankAmount: bigint | number
      }
      argsTuple: [minBankAmount: bigint | number]
      returns: void
    }>
    & Record<'set_payout_model(uint64)void' | 'set_payout_model', {
      argsObj: {
        appId: bigint | number
      }
      argsTuple: [appId: bigint | number]
      returns: void
    }>
    & Record<'set_min_bet_amount(uint64)void' | 'set_min_bet_amount', {
      argsObj: {
        minBetAmount: bigint | number
      }
      argsTuple: [minBetAmount: bigint | number]
      returns: void
    }>
    & Record<'set_max_bet_amount(uint64)void' | 'set_max_bet_amount', {
      argsObj: {
        maxBetAmount: bigint | number
      }
      argsTuple: [maxBetAmount: bigint | number]
      returns: void
    }>
    & Record<'burn_upgreadable_fuse()void' | 'burn_upgreadable_fuse', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'burn_stakeable_fuse()void' | 'burn_stakeable_fuse', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'burn_deletable_fuse()void' | 'burn_deletable_fuse', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'deposit()void' | 'deposit', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'withdraw(uint64)void' | 'withdraw', {
      argsObj: {
        /**
         * The amount of funds to withdraw in atomic units
         */
        amount: bigint | number
      }
      argsTuple: [amount: bigint | number]
      returns: void
    }>
    & Record<'get_balance_available()uint64' | 'get_balance_available', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'get_balance_locked()uint64' | 'get_balance_locked', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'get_balance_total()uint64' | 'get_balance_total', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'get_bet_key(address,uint64,uint64,uint64)byte[56]' | 'get_bet_key', {
      argsObj: {
        address: string
        amount: bigint | number
        round: bigint | number
        index: bigint | number
      }
      argsTuple: [address: string, amount: bigint | number, round: bigint | number, index: bigint | number]
      returns: Uint8Array
    }>
    & Record<'kill()void' | 'kill', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'spin(uint64,uint64)byte[56]' | 'spin', {
      argsObj: {
        betAmount: bigint | number
        /**
         * Player's choice of index.
         */
        index: bigint | number
      }
      argsTuple: [betAmount: bigint | number, index: bigint | number]
      /**
       * r (uint): The round number of the spin.
       */
      returns: Uint8Array
    }>
    & Record<'claim(byte[56])uint64' | 'claim', {
      argsObj: {
        /**
         * The key of the bet to claim
         */
        betKey: Uint8Array
      }
      argsTuple: [betKey: Uint8Array]
      /**
       * The payout for the bet
       */
      returns: bigint
    }>
    & Record<'set_version(uint64,uint64)void' | 'set_version', {
      argsObj: {
        contractVersion: bigint | number
        deploymentVersion: bigint | number
      }
      argsTuple: [contractVersion: bigint | number, deploymentVersion: bigint | number]
      returns: void
    }>
    & Record<'approve_update(bool)void' | 'approve_update', {
      argsObj: {
        approval: boolean
      }
      argsTuple: [approval: boolean]
      returns: void
    }>
    & Record<'grant_upgrader(address)void' | 'grant_upgrader', {
      argsObj: {
        upgrader: string
      }
      argsTuple: [upgrader: string]
      returns: void
    }>
    & Record<'set_delegate(address)void' | 'set_delegate', {
      argsObj: {
        delegate: string
      }
      argsTuple: [delegate: string]
      returns: void
    }>
    & Record<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void' | 'participate', {
      argsObj: {
        voteK: Uint8Array
        selK: Uint8Array
        voteFst: bigint | number
        voteLst: bigint | number
        voteKd: bigint | number
        spKey: Uint8Array
      }
      argsTuple: [voteK: Uint8Array, selK: Uint8Array, voteFst: bigint | number, voteLst: bigint | number, voteKd: bigint | number, spKey: Uint8Array]
      returns: void
    }>
    & Record<'transfer(address)void' | 'transfer', {
      argsObj: {
        newOwner: string
      }
      argsTuple: [newOwner: string]
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      balanceAvailable?: IntegerState
      balanceLocked?: IntegerState
      balanceTotal?: IntegerState
      contractVersion?: IntegerState
      delegate?: BinaryState
      deletable?: IntegerState
      deploymentVersion?: IntegerState
      maxBetAmount?: IntegerState
      minBankAmount?: IntegerState
      minBetAmount?: IntegerState
      owner?: BinaryState
      payoutModel?: IntegerState
      stakeable?: IntegerState
      updatable?: IntegerState
      upgrader?: BinaryState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type SlotMachineSig = keyof SlotMachine['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends SlotMachineSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the SlotMachine smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends SlotMachineSig> = SlotMachine['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the SlotMachine smart contract to the method's return type
 */
export type MethodReturn<TSignature extends SlotMachineSig> = SlotMachine['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type SlotMachineCreateCalls = (typeof SlotMachineCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type SlotMachineCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * A factory for available 'update' calls
 */
export type SlotMachineUpdateCalls = (typeof SlotMachineCallFactory)['update']
/**
 * Defines supported update methods for this smart contract
 */
export type SlotMachineUpdateCallParams =
  | TypedCallParams<undefined>
/**
 * A factory for available 'delete' calls
 */
export type SlotMachineDeleteCalls = (typeof SlotMachineCallFactory)['delete']
/**
 * Defines supported delete methods for this smart contract
 */
export type SlotMachineDeleteCallParams =
  | TypedCallParams<undefined>
  | TypedCallParams<'kill()void'>
/**
 * Defines arguments required for the deploy method.
 */
export type SlotMachineDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: SlotMachineCreateCalls) => SlotMachineCreateCallParams
  /**
   * A delegate which takes a update call factory and returns the update call params for this smart contract
   */
  updateCall?: (callFactory: SlotMachineUpdateCalls) => SlotMachineUpdateCallParams
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: SlotMachineDeleteCalls) => SlotMachineDeleteCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class SlotMachineCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the SlotMachine smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Gets available update call factories
   */
  static get update() {
    return {
      /**
       * Constructs an update call for the SlotMachine smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the SlotMachine smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
      /**
       * Constructs a delete call for the SlotMachine smart contract using the kill()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      kill(args: MethodArgs<'kill()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'kill()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the post_upgrade()void ABI method
   *
   * Called after upgrade
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static postUpgrade(args: MethodArgs<'post_upgrade()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'post_upgrade()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_min_bank_amount(uint64)void ABI method
   *
   * Set the minimum bank amount
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setMinBankAmount(args: MethodArgs<'set_min_bank_amount(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_min_bank_amount(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.minBankAmount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_payout_model(uint64)void ABI method
   *
   * Set the payout model
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setPayoutModel(args: MethodArgs<'set_payout_model(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_payout_model(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.appId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_min_bet_amount(uint64)void ABI method
   *
   * Set the minimum bet amount
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setMinBetAmount(args: MethodArgs<'set_min_bet_amount(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_min_bet_amount(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.minBetAmount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_max_bet_amount(uint64)void ABI method
   *
   * Set the maximum bet amount
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setMaxBetAmount(args: MethodArgs<'set_max_bet_amount(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_max_bet_amount(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.maxBetAmount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the burn_upgreadable_fuse()void ABI method
   *
   * Burn the upgradeable fuse
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static burnUpgreadableFuse(args: MethodArgs<'burn_upgreadable_fuse()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'burn_upgreadable_fuse()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the burn_stakeable_fuse()void ABI method
   *
   * Burn the stakeable fuse
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static burnStakeableFuse(args: MethodArgs<'burn_stakeable_fuse()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'burn_stakeable_fuse()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the burn_deletable_fuse()void ABI method
   *
   * Burn the deletable fuse
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static burnDeletableFuse(args: MethodArgs<'burn_deletable_fuse()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'burn_deletable_fuse()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the deposit()void ABI method
   *
   * Deposit funds into the contract
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static deposit(args: MethodArgs<'deposit()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'deposit()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the withdraw(uint64)void ABI method
   *
   * Withdraw funds from the contract
Only callable by contract owner
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static withdraw(args: MethodArgs<'withdraw(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'withdraw(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.amount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_balance_available()uint64 ABI method
   *
   * Get the available balance
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getBalanceAvailable(args: MethodArgs<'get_balance_available()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_balance_available()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_balance_locked()uint64 ABI method
   *
   * Get the locked balance
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getBalanceLocked(args: MethodArgs<'get_balance_locked()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_balance_locked()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_balance_total()uint64 ABI method
   *
   * Get the total balance
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getBalanceTotal(args: MethodArgs<'get_balance_total()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_balance_total()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_bet_key(address,uint64,uint64,uint64)byte[56] ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getBetKey(args: MethodArgs<'get_bet_key(address,uint64,uint64,uint64)byte[56]'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_bet_key(address,uint64,uint64,uint64)byte[56]' as const,
      methodArgs: Array.isArray(args) ? args : [args.address, args.amount, args.round, args.index],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the spin(uint64,uint64)byte[56] ABI method
   *
   * Spin the slot machine. Outcome is determined by the seed
of future round.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static spin(args: MethodArgs<'spin(uint64,uint64)byte[56]'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'spin(uint64,uint64)byte[56]' as const,
      methodArgs: Array.isArray(args) ? args : [args.betAmount, args.index],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the claim(byte[56])uint64 ABI method
   *
   * Claim a bet
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static claim(args: MethodArgs<'claim(byte[56])uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'claim(byte[56])uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.betKey],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_version(uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setVersion(args: MethodArgs<'set_version(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_version(uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.contractVersion, args.deploymentVersion],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the approve_update(bool)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static approveUpdate(args: MethodArgs<'approve_update(bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'approve_update(bool)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.approval],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the grant_upgrader(address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static grantUpgrader(args: MethodArgs<'grant_upgrader(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'grant_upgrader(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.upgrader],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_delegate(address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setDelegate(args: MethodArgs<'set_delegate(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_delegate(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.delegate],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static participate(args: MethodArgs<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.voteK, args.selK, args.voteFst, args.voteLst, args.voteKd, args.spKey],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the transfer(address)void ABI method
   *
   * Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static transfer(args: MethodArgs<'transfer(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'transfer(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.newOwner],
      ...params,
    }
  }
}

/**
 * A client to make calls to the SlotMachine smart contract
 */
export class SlotMachineClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `SlotMachineClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof SlotMachine['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the SlotMachine smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: SlotMachineDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(SlotMachineCallFactory.create)
    const updateArgs = params.updateCall?.(SlotMachineCallFactory.update)
    const deleteArgs = params.deleteCall?.(SlotMachineCallFactory.delete)
    return this.appClient.deploy({
      ...params,
      updateArgs,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the SlotMachine smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<undefined, AppCreateCallTransactionResult>(await $this.appClient.create(args))
      },
    }
  }

  /**
   * Gets available update methods
   */
  public get update() {
    const $this = this
    return {
      /**
       * Updates an existing instance of the SlotMachine smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The update result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<undefined, AppUpdateCallTransactionResult>(await $this.appClient.update(args))
      },
    }
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this
    return {
      /**
       * Deletes an existing instance of the SlotMachine smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The delete result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<undefined>(await $this.appClient.delete(args))
      },
      /**
       * Deletes an existing instance of the SlotMachine smart contract using the kill()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The delete result
       */
      async kill(args: MethodArgs<'kill()void'>, params: AppClientCallCoreParams = {}) {
        return $this.mapReturnValue<MethodReturn<'kill()void'>>(await $this.appClient.delete(SlotMachineCallFactory.delete.kill(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the SlotMachine smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the post_upgrade()void ABI method.
   *
   * Called after upgrade
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public postUpgrade(args: MethodArgs<'post_upgrade()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SlotMachineCallFactory.postUpgrade(args, params))
  }

  /**
   * Calls the set_min_bank_amount(uint64)void ABI method.
   *
   * Set the minimum bank amount
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setMinBankAmount(args: MethodArgs<'set_min_bank_amount(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SlotMachineCallFactory.setMinBankAmount(args, params))
  }

  /**
   * Calls the set_payout_model(uint64)void ABI method.
   *
   * Set the payout model
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setPayoutModel(args: MethodArgs<'set_payout_model(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SlotMachineCallFactory.setPayoutModel(args, params))
  }

  /**
   * Calls the set_min_bet_amount(uint64)void ABI method.
   *
   * Set the minimum bet amount
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setMinBetAmount(args: MethodArgs<'set_min_bet_amount(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SlotMachineCallFactory.setMinBetAmount(args, params))
  }

  /**
   * Calls the set_max_bet_amount(uint64)void ABI method.
   *
   * Set the maximum bet amount
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setMaxBetAmount(args: MethodArgs<'set_max_bet_amount(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SlotMachineCallFactory.setMaxBetAmount(args, params))
  }

  /**
   * Calls the burn_upgreadable_fuse()void ABI method.
   *
   * Burn the upgradeable fuse
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public burnUpgreadableFuse(args: MethodArgs<'burn_upgreadable_fuse()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SlotMachineCallFactory.burnUpgreadableFuse(args, params))
  }

  /**
   * Calls the burn_stakeable_fuse()void ABI method.
   *
   * Burn the stakeable fuse
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public burnStakeableFuse(args: MethodArgs<'burn_stakeable_fuse()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SlotMachineCallFactory.burnStakeableFuse(args, params))
  }

  /**
   * Calls the burn_deletable_fuse()void ABI method.
   *
   * Burn the deletable fuse
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public burnDeletableFuse(args: MethodArgs<'burn_deletable_fuse()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SlotMachineCallFactory.burnDeletableFuse(args, params))
  }

  /**
   * Calls the deposit()void ABI method.
   *
   * Deposit funds into the contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public deposit(args: MethodArgs<'deposit()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SlotMachineCallFactory.deposit(args, params))
  }

  /**
   * Calls the withdraw(uint64)void ABI method.
   *
   * Withdraw funds from the contract
Only callable by contract owner
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public withdraw(args: MethodArgs<'withdraw(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SlotMachineCallFactory.withdraw(args, params))
  }

  /**
   * Calls the get_balance_available()uint64 ABI method.
   *
   * Get the available balance
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getBalanceAvailable(args: MethodArgs<'get_balance_available()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SlotMachineCallFactory.getBalanceAvailable(args, params))
  }

  /**
   * Calls the get_balance_locked()uint64 ABI method.
   *
   * Get the locked balance
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getBalanceLocked(args: MethodArgs<'get_balance_locked()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SlotMachineCallFactory.getBalanceLocked(args, params))
  }

  /**
   * Calls the get_balance_total()uint64 ABI method.
   *
   * Get the total balance
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getBalanceTotal(args: MethodArgs<'get_balance_total()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SlotMachineCallFactory.getBalanceTotal(args, params))
  }

  /**
   * Calls the get_bet_key(address,uint64,uint64,uint64)byte[56] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getBetKey(args: MethodArgs<'get_bet_key(address,uint64,uint64,uint64)byte[56]'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SlotMachineCallFactory.getBetKey(args, params))
  }

  /**
   * Calls the spin(uint64,uint64)byte[56] ABI method.
   *
   * Spin the slot machine. Outcome is determined by the seed
of future round.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: r (uint): The round number of the spin.
   */
  public spin(args: MethodArgs<'spin(uint64,uint64)byte[56]'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SlotMachineCallFactory.spin(args, params))
  }

  /**
   * Calls the claim(byte[56])uint64 ABI method.
   *
   * Claim a bet
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: The payout for the bet
   */
  public claim(args: MethodArgs<'claim(byte[56])uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SlotMachineCallFactory.claim(args, params))
  }

  /**
   * Calls the set_version(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setVersion(args: MethodArgs<'set_version(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SlotMachineCallFactory.setVersion(args, params))
  }

  /**
   * Calls the approve_update(bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public approveUpdate(args: MethodArgs<'approve_update(bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SlotMachineCallFactory.approveUpdate(args, params))
  }

  /**
   * Calls the grant_upgrader(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public grantUpgrader(args: MethodArgs<'grant_upgrader(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SlotMachineCallFactory.grantUpgrader(args, params))
  }

  /**
   * Calls the set_delegate(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setDelegate(args: MethodArgs<'set_delegate(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SlotMachineCallFactory.setDelegate(args, params))
  }

  /**
   * Calls the participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public participate(args: MethodArgs<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SlotMachineCallFactory.participate(args, params))
  }

  /**
   * Calls the transfer(address)void ABI method.
   *
   * Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public transfer(args: MethodArgs<'transfer(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SlotMachineCallFactory.transfer(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<SlotMachine['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get balanceAvailable() {
        return SlotMachineClient.getIntegerState(state, 'balance_available')
      },
      get balanceLocked() {
        return SlotMachineClient.getIntegerState(state, 'balance_locked')
      },
      get balanceTotal() {
        return SlotMachineClient.getIntegerState(state, 'balance_total')
      },
      get contractVersion() {
        return SlotMachineClient.getIntegerState(state, 'contract_version')
      },
      get delegate() {
        return SlotMachineClient.getBinaryState(state, 'delegate')
      },
      get deletable() {
        return SlotMachineClient.getIntegerState(state, 'deletable')
      },
      get deploymentVersion() {
        return SlotMachineClient.getIntegerState(state, 'deployment_version')
      },
      get maxBetAmount() {
        return SlotMachineClient.getIntegerState(state, 'max_bet_amount')
      },
      get minBankAmount() {
        return SlotMachineClient.getIntegerState(state, 'min_bank_amount')
      },
      get minBetAmount() {
        return SlotMachineClient.getIntegerState(state, 'min_bet_amount')
      },
      get owner() {
        return SlotMachineClient.getBinaryState(state, 'owner')
      },
      get payoutModel() {
        return SlotMachineClient.getIntegerState(state, 'payout_model')
      },
      get stakeable() {
        return SlotMachineClient.getIntegerState(state, 'stakeable')
      },
      get updatable() {
        return SlotMachineClient.getIntegerState(state, 'updatable')
      },
      get upgrader() {
        return SlotMachineClient.getBinaryState(state, 'upgrader')
      },
    }
  }

  public compose(): SlotMachineComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      postUpgrade(args: MethodArgs<'post_upgrade()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.postUpgrade(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setMinBankAmount(args: MethodArgs<'set_min_bank_amount(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setMinBankAmount(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setPayoutModel(args: MethodArgs<'set_payout_model(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setPayoutModel(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setMinBetAmount(args: MethodArgs<'set_min_bet_amount(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setMinBetAmount(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setMaxBetAmount(args: MethodArgs<'set_max_bet_amount(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setMaxBetAmount(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      burnUpgreadableFuse(args: MethodArgs<'burn_upgreadable_fuse()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.burnUpgreadableFuse(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      burnStakeableFuse(args: MethodArgs<'burn_stakeable_fuse()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.burnStakeableFuse(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      burnDeletableFuse(args: MethodArgs<'burn_deletable_fuse()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.burnDeletableFuse(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      deposit(args: MethodArgs<'deposit()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.deposit(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      withdraw(args: MethodArgs<'withdraw(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.withdraw(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getBalanceAvailable(args: MethodArgs<'get_balance_available()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getBalanceAvailable(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getBalanceLocked(args: MethodArgs<'get_balance_locked()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getBalanceLocked(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getBalanceTotal(args: MethodArgs<'get_balance_total()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getBalanceTotal(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getBetKey(args: MethodArgs<'get_bet_key(address,uint64,uint64,uint64)byte[56]'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getBetKey(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      spin(args: MethodArgs<'spin(uint64,uint64)byte[56]'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.spin(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      claim(args: MethodArgs<'claim(byte[56])uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.claim(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setVersion(args: MethodArgs<'set_version(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setVersion(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      approveUpdate(args: MethodArgs<'approve_update(bool)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.approveUpdate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      grantUpgrader(args: MethodArgs<'grant_upgrader(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.grantUpgrader(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setDelegate(args: MethodArgs<'set_delegate(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setDelegate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      participate(args: MethodArgs<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.participate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      transfer(args: MethodArgs<'transfer(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.transfer(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get update() {
        const $this = this
        return {
          bare(args?: BareCallArgs & AppClientComposeCallCoreParams & AppClientCompilationParams & CoreAppCallArgs) {
            promiseChain = promiseChain.then(() => client.update.bare({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      get delete() {
        const $this = this
        return {
          bare(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
            promiseChain = promiseChain.then(() => client.delete.bare({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
          kill(args: MethodArgs<'kill()void'>, params?: AppClientComposeCallCoreParams) {
            promiseChain = promiseChain.then(() => client.delete.kill(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as SlotMachineComposer
  }
}
export type SlotMachineComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the post_upgrade()void ABI method.
   *
   * Called after upgrade
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  postUpgrade(args: MethodArgs<'post_upgrade()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): SlotMachineComposer<[...TReturns, MethodReturn<'post_upgrade()void'>]>

  /**
   * Calls the set_min_bank_amount(uint64)void ABI method.
   *
   * Set the minimum bank amount
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setMinBankAmount(args: MethodArgs<'set_min_bank_amount(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): SlotMachineComposer<[...TReturns, MethodReturn<'set_min_bank_amount(uint64)void'>]>

  /**
   * Calls the set_payout_model(uint64)void ABI method.
   *
   * Set the payout model
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setPayoutModel(args: MethodArgs<'set_payout_model(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): SlotMachineComposer<[...TReturns, MethodReturn<'set_payout_model(uint64)void'>]>

  /**
   * Calls the set_min_bet_amount(uint64)void ABI method.
   *
   * Set the minimum bet amount
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setMinBetAmount(args: MethodArgs<'set_min_bet_amount(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): SlotMachineComposer<[...TReturns, MethodReturn<'set_min_bet_amount(uint64)void'>]>

  /**
   * Calls the set_max_bet_amount(uint64)void ABI method.
   *
   * Set the maximum bet amount
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setMaxBetAmount(args: MethodArgs<'set_max_bet_amount(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): SlotMachineComposer<[...TReturns, MethodReturn<'set_max_bet_amount(uint64)void'>]>

  /**
   * Calls the burn_upgreadable_fuse()void ABI method.
   *
   * Burn the upgradeable fuse
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  burnUpgreadableFuse(args: MethodArgs<'burn_upgreadable_fuse()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): SlotMachineComposer<[...TReturns, MethodReturn<'burn_upgreadable_fuse()void'>]>

  /**
   * Calls the burn_stakeable_fuse()void ABI method.
   *
   * Burn the stakeable fuse
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  burnStakeableFuse(args: MethodArgs<'burn_stakeable_fuse()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): SlotMachineComposer<[...TReturns, MethodReturn<'burn_stakeable_fuse()void'>]>

  /**
   * Calls the burn_deletable_fuse()void ABI method.
   *
   * Burn the deletable fuse
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  burnDeletableFuse(args: MethodArgs<'burn_deletable_fuse()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): SlotMachineComposer<[...TReturns, MethodReturn<'burn_deletable_fuse()void'>]>

  /**
   * Calls the deposit()void ABI method.
   *
   * Deposit funds into the contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deposit(args: MethodArgs<'deposit()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): SlotMachineComposer<[...TReturns, MethodReturn<'deposit()void'>]>

  /**
   * Calls the withdraw(uint64)void ABI method.
   *
   * Withdraw funds from the contract
Only callable by contract owner
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdraw(args: MethodArgs<'withdraw(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): SlotMachineComposer<[...TReturns, MethodReturn<'withdraw(uint64)void'>]>

  /**
   * Calls the get_balance_available()uint64 ABI method.
   *
   * Get the available balance
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getBalanceAvailable(args: MethodArgs<'get_balance_available()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): SlotMachineComposer<[...TReturns, MethodReturn<'get_balance_available()uint64'>]>

  /**
   * Calls the get_balance_locked()uint64 ABI method.
   *
   * Get the locked balance
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getBalanceLocked(args: MethodArgs<'get_balance_locked()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): SlotMachineComposer<[...TReturns, MethodReturn<'get_balance_locked()uint64'>]>

  /**
   * Calls the get_balance_total()uint64 ABI method.
   *
   * Get the total balance
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getBalanceTotal(args: MethodArgs<'get_balance_total()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): SlotMachineComposer<[...TReturns, MethodReturn<'get_balance_total()uint64'>]>

  /**
   * Calls the get_bet_key(address,uint64,uint64,uint64)byte[56] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getBetKey(args: MethodArgs<'get_bet_key(address,uint64,uint64,uint64)byte[56]'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): SlotMachineComposer<[...TReturns, MethodReturn<'get_bet_key(address,uint64,uint64,uint64)byte[56]'>]>

  /**
   * Calls the spin(uint64,uint64)byte[56] ABI method.
   *
   * Spin the slot machine. Outcome is determined by the seed
of future round.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  spin(args: MethodArgs<'spin(uint64,uint64)byte[56]'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): SlotMachineComposer<[...TReturns, MethodReturn<'spin(uint64,uint64)byte[56]'>]>

  /**
   * Calls the claim(byte[56])uint64 ABI method.
   *
   * Claim a bet
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claim(args: MethodArgs<'claim(byte[56])uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): SlotMachineComposer<[...TReturns, MethodReturn<'claim(byte[56])uint64'>]>

  /**
   * Calls the set_version(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setVersion(args: MethodArgs<'set_version(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): SlotMachineComposer<[...TReturns, MethodReturn<'set_version(uint64,uint64)void'>]>

  /**
   * Calls the approve_update(bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  approveUpdate(args: MethodArgs<'approve_update(bool)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): SlotMachineComposer<[...TReturns, MethodReturn<'approve_update(bool)void'>]>

  /**
   * Calls the grant_upgrader(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  grantUpgrader(args: MethodArgs<'grant_upgrader(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): SlotMachineComposer<[...TReturns, MethodReturn<'grant_upgrader(address)void'>]>

  /**
   * Calls the set_delegate(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setDelegate(args: MethodArgs<'set_delegate(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): SlotMachineComposer<[...TReturns, MethodReturn<'set_delegate(address)void'>]>

  /**
   * Calls the participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  participate(args: MethodArgs<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): SlotMachineComposer<[...TReturns, MethodReturn<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'>]>

  /**
   * Calls the transfer(address)void ABI method.
   *
   * Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  transfer(args: MethodArgs<'transfer(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): SlotMachineComposer<[...TReturns, MethodReturn<'transfer(address)void'>]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the SlotMachine smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(args?: BareCallArgs & AppClientComposeCallCoreParams & AppClientCompilationParams & CoreAppCallArgs): SlotMachineComposer<[...TReturns, undefined]>
  }

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the SlotMachine smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): SlotMachineComposer<[...TReturns, undefined]>
    /**
     * Deletes an existing instance of the SlotMachine smart contract using the kill()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    kill(args: MethodArgs<'kill()void'>, params?: AppClientComposeCallCoreParams): SlotMachineComposer<[...TReturns, MethodReturn<'kill()void'>]>
  }

  /**
   * Makes a clear_state call to an existing instance of the SlotMachine smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): SlotMachineComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): SlotMachineComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<SlotMachineComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<SlotMachineComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type SlotMachineComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type SlotMachineComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
