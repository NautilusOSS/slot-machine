/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils';
import { AtomicTransactionComposer, modelsv2 } from 'algosdk';
export const APP_SPEC = {
    "hints": {
        "set_payout_model(uint64[6],uint64[6])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_payout_model()(uint64[6],uint64[6])": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "PayoutModel",
                    "elements": [
                        [
                            "multipliers",
                            "uint64[6]"
                        ],
                        [
                            "probabilities",
                            "uint64[6]"
                        ]
                    ]
                }
            }
        },
        "get_payout(uint64,uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_version(uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "approve_update(bool)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "grant_upgrader(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "transfer(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpjb250cmFjdC5TbG90TWFjaGluZVBheW91dE1vZGVsLmFwcHJvdmFsX3Byb2dyYW06CiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYm56IG1haW5fZW50cnlwb2ludEAyCiAgICBjYWxsc3ViIF9faW5pdF9fCgptYWluX2VudHJ5cG9pbnRAMjoKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjI3CiAgICAvLyBjbGFzcyBTbG90TWFjaGluZVBheW91dE1vZGVsKFNsb3RNYWNoaW5lUGF5b3V0TW9kZWxJbnRlcmZhY2UsIFVwZ3JhZGVhYmxlLCBEZWxldGVhYmxlKToKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBtYWluX2JhcmVfcm91dGluZ0AxMwogICAgbWV0aG9kICJzZXRfcGF5b3V0X21vZGVsKHVpbnQ2NFs2XSx1aW50NjRbNl0pdm9pZCIKICAgIG1ldGhvZCAiZ2V0X3BheW91dF9tb2RlbCgpKHVpbnQ2NFs2XSx1aW50NjRbNl0pIgogICAgbWV0aG9kICJnZXRfcGF5b3V0KHVpbnQ2NCx1aW50NjQpdWludDY0IgogICAgbWV0aG9kICJzZXRfdmVyc2lvbih1aW50NjQsdWludDY0KXZvaWQiCiAgICBtZXRob2QgImFwcHJvdmVfdXBkYXRlKGJvb2wpdm9pZCIKICAgIG1ldGhvZCAiZ3JhbnRfdXBncmFkZXIoYWRkcmVzcyl2b2lkIgogICAgbWV0aG9kICJ0cmFuc2ZlcihhZGRyZXNzKXZvaWQiCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBtYWluX3NldF9wYXlvdXRfbW9kZWxfcm91dGVANCBtYWluX2dldF9wYXlvdXRfbW9kZWxfcm91dGVANSBtYWluX2dldF9wYXlvdXRfcm91dGVANiBtYWluX3NldF92ZXJzaW9uX3JvdXRlQDcgbWFpbl9hcHByb3ZlX3VwZGF0ZV9yb3V0ZUA4IG1haW5fZ3JhbnRfdXBncmFkZXJfcm91dGVAOSBtYWluX3RyYW5zZmVyX3JvdXRlQDEwCiAgICBlcnIgLy8gcmVqZWN0IHRyYW5zYWN0aW9uCgptYWluX3NldF9wYXlvdXRfbW9kZWxfcm91dGVANDoKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjU3CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBpcyBub3QgY3JlYXRpbmcKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjI3CiAgICAvLyBjbGFzcyBTbG90TWFjaGluZVBheW91dE1vZGVsKFNsb3RNYWNoaW5lUGF5b3V0TW9kZWxJbnRlcmZhY2UsIFVwZ3JhZGVhYmxlLCBEZWxldGVhYmxlKToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjU3CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGNhbGxzdWIgc2V0X3BheW91dF9tb2RlbAogICAgaW50IDEKICAgIHJldHVybgoKbWFpbl9nZXRfcGF5b3V0X21vZGVsX3JvdXRlQDU6CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjI2OAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHJlYWRvbmx5PVRydWUpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIGdldF9wYXlvdXRfbW9kZWwKICAgIGJ5dGUgMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludCAxCiAgICByZXR1cm4KCm1haW5fZ2V0X3BheW91dF9yb3V0ZUA2OgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToxODYKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGlzIG5vdCBjcmVhdGluZwogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyMjcKICAgIC8vIGNsYXNzIFNsb3RNYWNoaW5lUGF5b3V0TW9kZWwoU2xvdE1hY2hpbmVQYXlvdXRNb2RlbEludGVyZmFjZSwgVXBncmFkZWFibGUsIERlbGV0ZWFibGUpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToxODYKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgY2FsbHN1YiBnZXRfcGF5b3V0CiAgICBieXRlIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnQgMQogICAgcmV0dXJuCgptYWluX3NldF92ZXJzaW9uX3JvdXRlQDc6CiAgICAvLyB1c3IvbG9jYWwvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9vcGVuc3VibWFyaW5lL2NvbnRyYWN0cy91cGRhdGUvVXBncmFkZWFibGUvY29udHJhY3QucHk6ODMKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGlzIG5vdCBjcmVhdGluZwogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyMjcKICAgIC8vIGNsYXNzIFNsb3RNYWNoaW5lUGF5b3V0TW9kZWwoU2xvdE1hY2hpbmVQYXlvdXRNb2RlbEludGVyZmFjZSwgVXBncmFkZWFibGUsIERlbGV0ZWFibGUpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgLy8gdXNyL2xvY2FsL2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMvb3BlbnN1Ym1hcmluZS9jb250cmFjdHMvdXBkYXRlL1VwZ3JhZGVhYmxlL2NvbnRyYWN0LnB5OjgzCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGNhbGxzdWIgc2V0X3ZlcnNpb24KICAgIGludCAxCiAgICByZXR1cm4KCm1haW5fYXBwcm92ZV91cGRhdGVfcm91dGVAODoKICAgIC8vIHVzci9sb2NhbC9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL29wZW5zdWJtYXJpbmUvY29udHJhY3RzL3VwZGF0ZS9VcGdyYWRlYWJsZS9jb250cmFjdC5weToxMDEKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGlzIG5vdCBjcmVhdGluZwogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyMjcKICAgIC8vIGNsYXNzIFNsb3RNYWNoaW5lUGF5b3V0TW9kZWwoU2xvdE1hY2hpbmVQYXlvdXRNb2RlbEludGVyZmFjZSwgVXBncmFkZWFibGUsIERlbGV0ZWFibGUpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgLy8gdXNyL2xvY2FsL2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMvb3BlbnN1Ym1hcmluZS9jb250cmFjdHMvdXBkYXRlL1VwZ3JhZGVhYmxlL2NvbnRyYWN0LnB5OjEwMQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIGFwcHJvdmVfdXBkYXRlCiAgICBpbnQgMQogICAgcmV0dXJuCgptYWluX2dyYW50X3VwZ3JhZGVyX3JvdXRlQDk6CiAgICAvLyB1c3IvbG9jYWwvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9vcGVuc3VibWFyaW5lL2NvbnRyYWN0cy91cGRhdGUvVXBncmFkZWFibGUvY29udHJhY3QucHk6MTA3CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBpcyBub3QgY3JlYXRpbmcKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjI3CiAgICAvLyBjbGFzcyBTbG90TWFjaGluZVBheW91dE1vZGVsKFNsb3RNYWNoaW5lUGF5b3V0TW9kZWxJbnRlcmZhY2UsIFVwZ3JhZGVhYmxlLCBEZWxldGVhYmxlKToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIHVzci9sb2NhbC9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL29wZW5zdWJtYXJpbmUvY29udHJhY3RzL3VwZGF0ZS9VcGdyYWRlYWJsZS9jb250cmFjdC5weToxMDcKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgY2FsbHN1YiBncmFudF91cGdyYWRlcgogICAgaW50IDEKICAgIHJldHVybgoKbWFpbl90cmFuc2Zlcl9yb3V0ZUAxMDoKICAgIC8vIHVzci9sb2NhbC9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL29wZW5zdWJtYXJpbmUvY29udHJhY3RzL2FjY2Vzcy9Pd25hYmxlL2NvbnRyYWN0LnB5OjIyCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBpcyBub3QgY3JlYXRpbmcKICAgIGludCAxCiAgICByZXR1cm4KCm1haW5fYmFyZV9yb3V0aW5nQDEzOgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyMjcKICAgIC8vIGNsYXNzIFNsb3RNYWNoaW5lUGF5b3V0TW9kZWwoU2xvdE1hY2hpbmVQYXlvdXRNb2RlbEludGVyZmFjZSwgVXBncmFkZWFibGUsIERlbGV0ZWFibGUpOgogICAgdHhuIE9uQ29tcGxldGlvbgogICAgc3dpdGNoIG1haW5fY3JlYXRlQDE0IG1haW5fcmVqZWN0X2JhcmVfb25fY29tcGxldGlvbkAxNyBtYWluX3JlamVjdF9iYXJlX29uX2NvbXBsZXRpb25AMTcgbWFpbl9yZWplY3RfYmFyZV9vbl9jb21wbGV0aW9uQDE3IG1haW5fb25fdXBkYXRlQDE1IG1haW5fb25fZGVsZXRlQDE2CiAgICBlcnIgLy8gcmVqZWN0IHRyYW5zYWN0aW9uCgptYWluX2NyZWF0ZUAxNDoKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjI3CiAgICAvLyBjbGFzcyBTbG90TWFjaGluZVBheW91dE1vZGVsKFNsb3RNYWNoaW5lUGF5b3V0TW9kZWxJbnRlcmZhY2UsIFVwZ3JhZGVhYmxlLCBEZWxldGVhYmxlKToKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAhCiAgICBhc3NlcnQgLy8gaXMgY3JlYXRpbmcKICAgIGludCAxCiAgICByZXR1cm4KCm1haW5fb25fdXBkYXRlQDE1OgogICAgLy8gdXNyL2xvY2FsL2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMvb3BlbnN1Ym1hcmluZS9jb250cmFjdHMvdXBkYXRlL1VwZ3JhZGVhYmxlL2NvbnRyYWN0LnB5OjkyCiAgICAvLyBAYXJjNC5iYXJlbWV0aG9kKGFsbG93X2FjdGlvbnM9WyJVcGRhdGVBcHBsaWNhdGlvbiJdKQogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBpcyBub3QgY3JlYXRpbmcKICAgIC8vIHVzci9sb2NhbC9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL29wZW5zdWJtYXJpbmUvY29udHJhY3RzL3VwZGF0ZS9VcGdyYWRlYWJsZS9jb250cmFjdC5weTo5Mi05MwogICAgLy8gQGFyYzQuYmFyZW1ldGhvZChhbGxvd19hY3Rpb25zPVsiVXBkYXRlQXBwbGljYXRpb24iXSkKICAgIC8vIGRlZiBvbl91cGRhdGUoc2VsZikgLT4gTm9uZToKICAgIGNhbGxzdWIgb25fdXBkYXRlCiAgICBpbnQgMQogICAgcmV0dXJuCgptYWluX29uX2RlbGV0ZUAxNjoKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NTcKICAgIC8vIEBhcmM0LmJhcmVtZXRob2QoYWxsb3dfYWN0aW9ucz1bIkRlbGV0ZUFwcGxpY2F0aW9uIl0pCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGlzIG5vdCBjcmVhdGluZwogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo1Ny01OAogICAgLy8gQGFyYzQuYmFyZW1ldGhvZChhbGxvd19hY3Rpb25zPVsiRGVsZXRlQXBwbGljYXRpb24iXSkKICAgIC8vIGRlZiBvbl9kZWxldGUoc2VsZikgLT4gTm9uZTogICMgcHJhZ21hOiBubyBjb3ZlcgogICAgY2FsbHN1YiBvbl9kZWxldGUKICAgIGludCAxCiAgICByZXR1cm4KCm1haW5fcmVqZWN0X2JhcmVfb25fY29tcGxldGlvbkAxNzoKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjI3CiAgICAvLyBjbGFzcyBTbG90TWFjaGluZVBheW91dE1vZGVsKFNsb3RNYWNoaW5lUGF5b3V0TW9kZWxJbnRlcmZhY2UsIFVwZ3JhZGVhYmxlLCBEZWxldGVhYmxlKToKICAgIGVyciAvLyByZWplY3QgdHJhbnNhY3Rpb24KCgovLyBjb250cmFjdC5TbG90TWFjaGluZVBheW91dE1vZGVsLnNldF9wYXlvdXRfbW9kZWwobXVsdGlwbGllcnM6IGJ5dGVzLCBwcm9iYWJpbGl0aWVzOiBieXRlcykgLT4gdm9pZDoKc2V0X3BheW91dF9tb2RlbDoKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjU3LTI1OAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgc2V0X3BheW91dF9tb2RlbChzZWxmLCBtdWx0aXBsaWVyczogYXJjNC5TdGF0aWNBcnJheVthcmM0LlVJbnQ2NCwgdHlwaW5nLkxpdGVyYWxbNl1dLCBwcm9iYWJpbGl0aWVzOiBhcmM0LlN0YXRpY0FycmF5W2FyYzQuVUludDY0LCB0eXBpbmcuTGl0ZXJhbFs2XV0pIC0+IE5vbmU6CiAgICBwcm90byAyIDAKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjYyCiAgICAvLyBzZWxmLm9ubHlfb3duZXIoKQogICAgY2FsbHN1YiBvbmx5X293bmVyCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjI2MwogICAgLy8gc2VsZi5wYXlvdXRfbW9kZWwgPSBQYXlvdXRNb2RlbChtdWx0aXBsaWVycz1tdWx0aXBsaWVycy5jb3B5KCksIHByb2JhYmlsaXRpZXM9cHJvYmFiaWxpdGllcy5jb3B5KCkpCiAgICBmcmFtZV9kaWcgLTIKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjI0Mi0yNDMKICAgIC8vICMgcGF5b3V0IG1vZGVsIHN0YXRlCiAgICAvLyBzZWxmLnBheW91dF9tb2RlbCA9IHNlbGYuX2luaXRpYWxfcGF5b3V0X21vZGVsKCkKICAgIGJ5dGUgInBheW91dF9tb2RlbCIKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjYzCiAgICAvLyBzZWxmLnBheW91dF9tb2RlbCA9IFBheW91dE1vZGVsKG11bHRpcGxpZXJzPW11bHRpcGxpZXJzLmNvcHkoKSwgcHJvYmFiaWxpdGllcz1wcm9iYWJpbGl0aWVzLmNvcHkoKSkKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjI2NAogICAgLy8gYXJjNC5lbWl0KE1vZGVsVXBkYXRlZChvbGRfbW9kZWw9c2VsZi5wYXlvdXRfbW9kZWwsIG5ld19tb2RlbD1zZWxmLnBheW91dF9tb2RlbCkpCiAgICBpbnQgMAogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyNDItMjQzCiAgICAvLyAjIHBheW91dCBtb2RlbCBzdGF0ZQogICAgLy8gc2VsZi5wYXlvdXRfbW9kZWwgPSBzZWxmLl9pbml0aWFsX3BheW91dF9tb2RlbCgpCiAgICBieXRlICJwYXlvdXRfbW9kZWwiCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjI2NAogICAgLy8gYXJjNC5lbWl0KE1vZGVsVXBkYXRlZChvbGRfbW9kZWw9c2VsZi5wYXlvdXRfbW9kZWwsIG5ld19tb2RlbD1zZWxmLnBheW91dF9tb2RlbCkpCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYucGF5b3V0X21vZGVsIGV4aXN0cwogICAgaW50IDAKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjQyLTI0MwogICAgLy8gIyBwYXlvdXQgbW9kZWwgc3RhdGUKICAgIC8vIHNlbGYucGF5b3V0X21vZGVsID0gc2VsZi5faW5pdGlhbF9wYXlvdXRfbW9kZWwoKQogICAgYnl0ZSAicGF5b3V0X21vZGVsIgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyNjQKICAgIC8vIGFyYzQuZW1pdChNb2RlbFVwZGF0ZWQob2xkX21vZGVsPXNlbGYucGF5b3V0X21vZGVsLCBuZXdfbW9kZWw9c2VsZi5wYXlvdXRfbW9kZWwpKQogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnBheW91dF9tb2RlbCBleGlzdHMKICAgIGNvbmNhdAogICAgbWV0aG9kICJNb2RlbFVwZGF0ZWQoKHVpbnQ2NFs2XSx1aW50NjRbNl0pLCh1aW50NjRbNl0sdWludDY0WzZdKSkiCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgcmV0c3ViCgoKLy8gY29udHJhY3QuU2xvdE1hY2hpbmVQYXlvdXRNb2RlbC5vbmx5X293bmVyKCkgLT4gdm9pZDoKb25seV9vd25lcjoKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjQ4LTI0OQogICAgLy8gQHN1YnJvdXRpbmUKICAgIC8vIGRlZiBvbmx5X293bmVyKHNlbGYpIC0+IE5vbmU6CiAgICBwcm90byAwIDAKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjUzCiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciA9PSBzZWxmLm93bmVyLCAib25seSBvd25lciBjYW4gY2FsbCB0aGlzIGZ1bmN0aW9uIgogICAgdHhuIFNlbmRlcgogICAgaW50IDAKICAgIC8vIHVzci9sb2NhbC9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL29wZW5zdWJtYXJpbmUvY29udHJhY3RzL2FjY2Vzcy9Pd25hYmxlL2NvbnRyYWN0LnB5OjIwCiAgICAvLyBzZWxmLm93bmVyID0gQWNjb3VudCgpCiAgICBieXRlICJvd25lciIKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjUzCiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciA9PSBzZWxmLm93bmVyLCAib25seSBvd25lciBjYW4gY2FsbCB0aGlzIGZ1bmN0aW9uIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLm93bmVyIGV4aXN0cwogICAgPT0KICAgIGFzc2VydCAvLyBvbmx5IG93bmVyIGNhbiBjYWxsIHRoaXMgZnVuY3Rpb24KICAgIHJldHN1YgoKCi8vIGNvbnRyYWN0LlNsb3RNYWNoaW5lUGF5b3V0TW9kZWwuZ2V0X3BheW91dF9tb2RlbCgpIC0+IGJ5dGVzOgpnZXRfcGF5b3V0X21vZGVsOgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyNjgtMjY5CiAgICAvLyBAYXJjNC5hYmltZXRob2QocmVhZG9ubHk9VHJ1ZSkKICAgIC8vIGRlZiBnZXRfcGF5b3V0X21vZGVsKHNlbGYpIC0+IFBheW91dE1vZGVsOgogICAgcHJvdG8gMCAxCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjI3MwogICAgLy8gcmV0dXJuIHNlbGYucGF5b3V0X21vZGVsCiAgICBpbnQgMAogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyNDItMjQzCiAgICAvLyAjIHBheW91dCBtb2RlbCBzdGF0ZQogICAgLy8gc2VsZi5wYXlvdXRfbW9kZWwgPSBzZWxmLl9pbml0aWFsX3BheW91dF9tb2RlbCgpCiAgICBieXRlICJwYXlvdXRfbW9kZWwiCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjI3MwogICAgLy8gcmV0dXJuIHNlbGYucGF5b3V0X21vZGVsCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYucGF5b3V0X21vZGVsIGV4aXN0cwogICAgcmV0c3ViCgoKLy8gY29udHJhY3QuU2xvdE1hY2hpbmVQYXlvdXRNb2RlbEludGVyZmFjZS5nZXRfcGF5b3V0KGJldF9hbW91bnQ6IGJ5dGVzLCByOiBieXRlcykgLT4gYnl0ZXM6CmdldF9wYXlvdXQ6CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjE4Ni0xODcKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIGdldF9wYXlvdXQoc2VsZiwgYmV0X2Ftb3VudDogYXJjNC5VSW50NjQsIHI6IGFyYzQuVUludDY0KSAtPiBhcmM0LlVJbnQ2NDoKICAgIHByb3RvIDIgMQogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToxOTEKICAgIC8vIHJldHVybiBhcmM0LlVJbnQ2NChzZWxmLl9jYWxjdWxhdGVfYmV0X3BheW91dChiZXRfYW1vdW50Lm5hdGl2ZSwgci5uYXRpdmUpKQogICAgZnJhbWVfZGlnIC0yCiAgICBidG9pCiAgICBmcmFtZV9kaWcgLTEKICAgIGJ0b2kKICAgIGNhbGxzdWIgX2NhbGN1bGF0ZV9iZXRfcGF5b3V0CiAgICBpdG9iCiAgICByZXRzdWIKCgovLyBjb250cmFjdC5TbG90TWFjaGluZVBheW91dE1vZGVsLl9jYWxjdWxhdGVfYmV0X3BheW91dChiZXRfYW1vdW50OiB1aW50NjQsIHI6IHVpbnQ2NCkgLT4gdWludDY0OgpfY2FsY3VsYXRlX2JldF9wYXlvdXQ6CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjI3NS0yNzcKICAgIC8vICMgb3ZlcnJpZGUKICAgIC8vIEBzdWJyb3V0aW5lCiAgICAvLyBkZWYgX2NhbGN1bGF0ZV9iZXRfcGF5b3V0KHNlbGYsIGJldF9hbW91bnQ6IFVJbnQ2NCwgcjogVUludDY0KSAtPiBVSW50NjQ6CiAgICBwcm90byAyIDEKICAgIGJ5dGUgIiIKICAgIGR1cAogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyODMtMjk5CiAgICAvLyAjIG11bHRpcGxpZXJzID0gYXJjNC5TdGF0aWNBcnJheSgKICAgIC8vICMgICAgIGFyYzQuVUludDY0KDEwMCksICAjIDEwMHgKICAgIC8vICMgICAgIGFyYzQuVUludDY0KDUwKSwgICMgNTB4CiAgICAvLyAjICAgICBhcmM0LlVJbnQ2NCgyMCksICAjIDIweAogICAgLy8gIyAgICAgYXJjNC5VSW50NjQoMTApLCAgIyAxMHgKICAgIC8vICMgICAgIGFyYzQuVUludDY0KDUpLCAgIyA1eAogICAgLy8gIyAgICAgYXJjNC5VSW50NjQoMiksICAjIDJ4CiAgICAvLyAjICkKICAgIC8vICMgcHJvYmFiaWxpdGllcyA9IGFyYzQuU3RhdGljQXJyYXkoCiAgICAvLyAjICAgICBhcmM0LlVJbnQ2NCg4Ml83NTgpLCAgIyB+MC4wMDAwODI3NTg2MjA2OQogICAgLy8gIyAgICAgYXJjNC5VSW50NjQoMV82NTVfMTcyKSwgICMgfjAuMDAxNjU1MTcyNDE0CiAgICAvLyAjICAgICBhcmM0LlVJbnQ2NCg4XzI3NV84NjIpLCAgIyB+MC4wMDgyNzU4NjIwNjkKICAgIC8vICMgICAgIGFyYzQuVUludDY0KDE2XzU1MV83MjQpLCAgIyB+MC4wMTY1NTE3MjQxNAogICAgLy8gIyAgICAgYXJjNC5VSW50NjQoNDFfMzc5XzMxMCksICAjIH4wLjA0MTM3OTMxMDM0CiAgICAvLyAjICAgICBhcmM0LlVJbnQ2NCgxNjVfNTE3XzI0MSksICAjIH4wLjE2NTUxNzI0MTQKICAgIC8vICMgKQogICAgLy8gZm9yIGluZGV4IGluIHVyYW5nZSg2KToKICAgIGludCAwCgpfY2FsY3VsYXRlX2JldF9wYXlvdXRfZm9yX2hlYWRlckAxOgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyODMtMjk5CiAgICAvLyAjIG11bHRpcGxpZXJzID0gYXJjNC5TdGF0aWNBcnJheSgKICAgIC8vICMgICAgIGFyYzQuVUludDY0KDEwMCksICAjIDEwMHgKICAgIC8vICMgICAgIGFyYzQuVUludDY0KDUwKSwgICMgNTB4CiAgICAvLyAjICAgICBhcmM0LlVJbnQ2NCgyMCksICAjIDIweAogICAgLy8gIyAgICAgYXJjNC5VSW50NjQoMTApLCAgIyAxMHgKICAgIC8vICMgICAgIGFyYzQuVUludDY0KDUpLCAgIyA1eAogICAgLy8gIyAgICAgYXJjNC5VSW50NjQoMiksICAjIDJ4CiAgICAvLyAjICkKICAgIC8vICMgcHJvYmFiaWxpdGllcyA9IGFyYzQuU3RhdGljQXJyYXkoCiAgICAvLyAjICAgICBhcmM0LlVJbnQ2NCg4Ml83NTgpLCAgIyB+MC4wMDAwODI3NTg2MjA2OQogICAgLy8gIyAgICAgYXJjNC5VSW50NjQoMV82NTVfMTcyKSwgICMgfjAuMDAxNjU1MTcyNDE0CiAgICAvLyAjICAgICBhcmM0LlVJbnQ2NCg4XzI3NV84NjIpLCAgIyB+MC4wMDgyNzU4NjIwNjkKICAgIC8vICMgICAgIGFyYzQuVUludDY0KDE2XzU1MV83MjQpLCAgIyB+MC4wMTY1NTE3MjQxNAogICAgLy8gIyAgICAgYXJjNC5VSW50NjQoNDFfMzc5XzMxMCksICAjIH4wLjA0MTM3OTMxMDM0CiAgICAvLyAjICAgICBhcmM0LlVJbnQ2NCgxNjVfNTE3XzI0MSksICAjIH4wLjE2NTUxNzI0MTQKICAgIC8vICMgKQogICAgLy8gZm9yIGluZGV4IGluIHVyYW5nZSg2KToKICAgIGZyYW1lX2RpZyAyCiAgICBpbnQgNgogICAgPAogICAgYnogX2NhbGN1bGF0ZV9iZXRfcGF5b3V0X2FmdGVyX2ZvckA2CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjMwMAogICAgLy8gcHJvYiA9IHNlbGYucGF5b3V0X21vZGVsLnByb2JhYmlsaXRpZXNbaW5kZXhdLm5hdGl2ZQogICAgaW50IDAKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjQyLTI0MwogICAgLy8gIyBwYXlvdXQgbW9kZWwgc3RhdGUKICAgIC8vIHNlbGYucGF5b3V0X21vZGVsID0gc2VsZi5faW5pdGlhbF9wYXlvdXRfbW9kZWwoKQogICAgYnl0ZSAicGF5b3V0X21vZGVsIgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTozMDAKICAgIC8vIHByb2IgPSBzZWxmLnBheW91dF9tb2RlbC5wcm9iYWJpbGl0aWVzW2luZGV4XS5uYXRpdmUKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5wYXlvdXRfbW9kZWwgZXhpc3RzCiAgICBleHRyYWN0IDQ4IDQ4IC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgZnJhbWVfZGlnIDIKICAgIGludCA4CiAgICAqCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMAogICAgaW50IDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgZHVwCiAgICBmcmFtZV9idXJ5IDEKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MzAxCiAgICAvLyBpZiByIDwgcHJvYjoKICAgIGZyYW1lX2RpZyAtMQogICAgPgogICAgYnogX2NhbGN1bGF0ZV9iZXRfcGF5b3V0X2FmdGVyX2lmX2Vsc2VANAogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTozMDIKICAgIC8vIHJldHVybiBiZXRfYW1vdW50ICogc2VsZi5wYXlvdXRfbW9kZWwubXVsdGlwbGllcnNbaW5kZXhdLm5hdGl2ZQogICAgaW50IDAKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjQyLTI0MwogICAgLy8gIyBwYXlvdXQgbW9kZWwgc3RhdGUKICAgIC8vIHNlbGYucGF5b3V0X21vZGVsID0gc2VsZi5faW5pdGlhbF9wYXlvdXRfbW9kZWwoKQogICAgYnl0ZSAicGF5b3V0X21vZGVsIgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTozMDIKICAgIC8vIHJldHVybiBiZXRfYW1vdW50ICogc2VsZi5wYXlvdXRfbW9kZWwubXVsdGlwbGllcnNbaW5kZXhdLm5hdGl2ZQogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnBheW91dF9tb2RlbCBleGlzdHMKICAgIGV4dHJhY3QgMCA0OCAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGZyYW1lX2RpZyAwCiAgICBpbnQgOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBmcmFtZV9kaWcgLTIKICAgICoKICAgIGZyYW1lX2J1cnkgMAogICAgcmV0c3ViCgpfY2FsY3VsYXRlX2JldF9wYXlvdXRfYWZ0ZXJfaWZfZWxzZUA0OgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTozMDMKICAgIC8vIHIgLT0gcHJvYgogICAgZnJhbWVfZGlnIC0xCiAgICBmcmFtZV9kaWcgMQogICAgLQogICAgZnJhbWVfYnVyeSAtMQogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyODMtMjk5CiAgICAvLyAjIG11bHRpcGxpZXJzID0gYXJjNC5TdGF0aWNBcnJheSgKICAgIC8vICMgICAgIGFyYzQuVUludDY0KDEwMCksICAjIDEwMHgKICAgIC8vICMgICAgIGFyYzQuVUludDY0KDUwKSwgICMgNTB4CiAgICAvLyAjICAgICBhcmM0LlVJbnQ2NCgyMCksICAjIDIweAogICAgLy8gIyAgICAgYXJjNC5VSW50NjQoMTApLCAgIyAxMHgKICAgIC8vICMgICAgIGFyYzQuVUludDY0KDUpLCAgIyA1eAogICAgLy8gIyAgICAgYXJjNC5VSW50NjQoMiksICAjIDJ4CiAgICAvLyAjICkKICAgIC8vICMgcHJvYmFiaWxpdGllcyA9IGFyYzQuU3RhdGljQXJyYXkoCiAgICAvLyAjICAgICBhcmM0LlVJbnQ2NCg4Ml83NTgpLCAgIyB+MC4wMDAwODI3NTg2MjA2OQogICAgLy8gIyAgICAgYXJjNC5VSW50NjQoMV82NTVfMTcyKSwgICMgfjAuMDAxNjU1MTcyNDE0CiAgICAvLyAjICAgICBhcmM0LlVJbnQ2NCg4XzI3NV84NjIpLCAgIyB+MC4wMDgyNzU4NjIwNjkKICAgIC8vICMgICAgIGFyYzQuVUludDY0KDE2XzU1MV83MjQpLCAgIyB+MC4wMTY1NTE3MjQxNAogICAgLy8gIyAgICAgYXJjNC5VSW50NjQoNDFfMzc5XzMxMCksICAjIH4wLjA0MTM3OTMxMDM0CiAgICAvLyAjICAgICBhcmM0LlVJbnQ2NCgxNjVfNTE3XzI0MSksICAjIH4wLjE2NTUxNzI0MTQKICAgIC8vICMgKQogICAgLy8gZm9yIGluZGV4IGluIHVyYW5nZSg2KToKICAgIGZyYW1lX2RpZyAyCiAgICBpbnQgMQogICAgKwogICAgZnJhbWVfYnVyeSAyCiAgICBiIF9jYWxjdWxhdGVfYmV0X3BheW91dF9mb3JfaGVhZGVyQDEKCl9jYWxjdWxhdGVfYmV0X3BheW91dF9hZnRlcl9mb3JANjoKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MzA1CiAgICAvLyByZXR1cm4gVUludDY0KDApCiAgICBpbnQgMAogICAgZnJhbWVfYnVyeSAwCiAgICByZXRzdWIKCgovLyBvcGVuc3VibWFyaW5lLmNvbnRyYWN0cy51cGRhdGUuVXBncmFkZWFibGUuY29udHJhY3QuVXBncmFkZWFibGUuc2V0X3ZlcnNpb24oY29udHJhY3RfdmVyc2lvbjogYnl0ZXMsIGRlcGxveW1lbnRfdmVyc2lvbjogYnl0ZXMpIC0+IHZvaWQ6CnNldF92ZXJzaW9uOgogICAgLy8gdXNyL2xvY2FsL2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMvb3BlbnN1Ym1hcmluZS9jb250cmFjdHMvdXBkYXRlL1VwZ3JhZGVhYmxlL2NvbnRyYWN0LnB5OjgzLTg2CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiBzZXRfdmVyc2lvbigKICAgIC8vICAgICBzZWxmLCBjb250cmFjdF92ZXJzaW9uOiBhcmM0LlVJbnQ2NCwgZGVwbG95bWVudF92ZXJzaW9uOiBhcmM0LlVJbnQ2NAogICAgLy8gKSAtPiBOb25lOgogICAgcHJvdG8gMiAwCiAgICAvLyB1c3IvbG9jYWwvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9vcGVuc3VibWFyaW5lL2NvbnRyYWN0cy91cGRhdGUvVXBncmFkZWFibGUvY29udHJhY3QucHk6ODcKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyID09IHNlbGYudXBncmFkZXIsICJtdXN0IGJlIHVwZ3JhZGVyIgogICAgdHhuIFNlbmRlcgogICAgaW50IDAKICAgIC8vIHVzci9sb2NhbC9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL29wZW5zdWJtYXJpbmUvY29udHJhY3RzL3VwZGF0ZS9VcGdyYWRlYWJsZS9jb250cmFjdC5weTozNAogICAgLy8gc2VsZi51cGdyYWRlciA9IEFjY291bnQoKQogICAgYnl0ZSAidXBncmFkZXIiCiAgICAvLyB1c3IvbG9jYWwvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9vcGVuc3VibWFyaW5lL2NvbnRyYWN0cy91cGRhdGUvVXBncmFkZWFibGUvY29udHJhY3QucHk6ODcKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyID09IHNlbGYudXBncmFkZXIsICJtdXN0IGJlIHVwZ3JhZGVyIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnVwZ3JhZGVyIGV4aXN0cwogICAgPT0KICAgIGFzc2VydCAvLyBtdXN0IGJlIHVwZ3JhZGVyCiAgICAvLyB1c3IvbG9jYWwvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9vcGVuc3VibWFyaW5lL2NvbnRyYWN0cy91cGRhdGUvVXBncmFkZWFibGUvY29udHJhY3QucHk6ODgKICAgIC8vIGFyYzQuZW1pdChWZXJzaW9uVXBkYXRlZChjb250cmFjdF92ZXJzaW9uLCBkZXBsb3ltZW50X3ZlcnNpb24pKQogICAgZnJhbWVfZGlnIC0yCiAgICBmcmFtZV9kaWcgLTEKICAgIGNvbmNhdAogICAgbWV0aG9kICJWZXJzaW9uVXBkYXRlZCh1aW50NjQsdWludDY0KSIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICAvLyB1c3IvbG9jYWwvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9vcGVuc3VibWFyaW5lL2NvbnRyYWN0cy91cGRhdGUvVXBncmFkZWFibGUvY29udHJhY3QucHk6ODkKICAgIC8vIHNlbGYuY29udHJhY3RfdmVyc2lvbiA9IGNvbnRyYWN0X3ZlcnNpb24ubmF0aXZlCiAgICBmcmFtZV9kaWcgLTIKICAgIGJ0b2kKICAgIC8vIHVzci9sb2NhbC9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL29wZW5zdWJtYXJpbmUvY29udHJhY3RzL3VwZGF0ZS9VcGdyYWRlYWJsZS9jb250cmFjdC5weTozMQogICAgLy8gc2VsZi5jb250cmFjdF92ZXJzaW9uID0gVUludDY0KCkKICAgIGJ5dGUgImNvbnRyYWN0X3ZlcnNpb24iCiAgICAvLyB1c3IvbG9jYWwvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9vcGVuc3VibWFyaW5lL2NvbnRyYWN0cy91cGRhdGUvVXBncmFkZWFibGUvY29udHJhY3QucHk6ODkKICAgIC8vIHNlbGYuY29udHJhY3RfdmVyc2lvbiA9IGNvbnRyYWN0X3ZlcnNpb24ubmF0aXZlCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gdXNyL2xvY2FsL2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMvb3BlbnN1Ym1hcmluZS9jb250cmFjdHMvdXBkYXRlL1VwZ3JhZGVhYmxlL2NvbnRyYWN0LnB5OjkwCiAgICAvLyBzZWxmLmRlcGxveW1lbnRfdmVyc2lvbiA9IGRlcGxveW1lbnRfdmVyc2lvbi5uYXRpdmUKICAgIGZyYW1lX2RpZyAtMQogICAgYnRvaQogICAgLy8gdXNyL2xvY2FsL2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMvb3BlbnN1Ym1hcmluZS9jb250cmFjdHMvdXBkYXRlL1VwZ3JhZGVhYmxlL2NvbnRyYWN0LnB5OjMyCiAgICAvLyBzZWxmLmRlcGxveW1lbnRfdmVyc2lvbiA9IFVJbnQ2NCgpCiAgICBieXRlICJkZXBsb3ltZW50X3ZlcnNpb24iCiAgICAvLyB1c3IvbG9jYWwvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9vcGVuc3VibWFyaW5lL2NvbnRyYWN0cy91cGRhdGUvVXBncmFkZWFibGUvY29udHJhY3QucHk6OTAKICAgIC8vIHNlbGYuZGVwbG95bWVudF92ZXJzaW9uID0gZGVwbG95bWVudF92ZXJzaW9uLm5hdGl2ZQogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIHJldHN1YgoKCi8vIG9wZW5zdWJtYXJpbmUuY29udHJhY3RzLnVwZGF0ZS5VcGdyYWRlYWJsZS5jb250cmFjdC5VcGdyYWRlYWJsZS5hcHByb3ZlX3VwZGF0ZShhcHByb3ZhbDogYnl0ZXMpIC0+IHZvaWQ6CmFwcHJvdmVfdXBkYXRlOgogICAgLy8gdXNyL2xvY2FsL2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMvb3BlbnN1Ym1hcmluZS9jb250cmFjdHMvdXBkYXRlL1VwZ3JhZGVhYmxlL2NvbnRyYWN0LnB5OjEwMS0xMDIKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIGFwcHJvdmVfdXBkYXRlKHNlbGYsIGFwcHJvdmFsOiBhcmM0LkJvb2wpIC0+IE5vbmU6CiAgICBwcm90byAxIDAKICAgIC8vIHVzci9sb2NhbC9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL29wZW5zdWJtYXJpbmUvY29udHJhY3RzL3VwZGF0ZS9VcGdyYWRlYWJsZS9jb250cmFjdC5weToxMDMKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyID09IHNlbGYub3duZXIsICJtdXN0IGJlIG93bmVyIgogICAgdHhuIFNlbmRlcgogICAgaW50IDAKICAgIC8vIHVzci9sb2NhbC9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL29wZW5zdWJtYXJpbmUvY29udHJhY3RzL2FjY2Vzcy9Pd25hYmxlL2NvbnRyYWN0LnB5OjIwCiAgICAvLyBzZWxmLm93bmVyID0gQWNjb3VudCgpCiAgICBieXRlICJvd25lciIKICAgIC8vIHVzci9sb2NhbC9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL29wZW5zdWJtYXJpbmUvY29udHJhY3RzL3VwZGF0ZS9VcGdyYWRlYWJsZS9jb250cmFjdC5weToxMDMKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyID09IHNlbGYub3duZXIsICJtdXN0IGJlIG93bmVyIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLm93bmVyIGV4aXN0cwogICAgPT0KICAgIGFzc2VydCAvLyBtdXN0IGJlIG93bmVyCiAgICAvLyB1c3IvbG9jYWwvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9vcGVuc3VibWFyaW5lL2NvbnRyYWN0cy91cGRhdGUvVXBncmFkZWFibGUvY29udHJhY3QucHk6MTA0CiAgICAvLyBhcmM0LmVtaXQoVXBkYXRlQXBwcm92ZWQoYXJjNC5BZGRyZXNzKHNlbGYub3duZXIpLCBhcHByb3ZhbCkpCiAgICBpbnQgMAogICAgLy8gdXNyL2xvY2FsL2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMvb3BlbnN1Ym1hcmluZS9jb250cmFjdHMvYWNjZXNzL093bmFibGUvY29udHJhY3QucHk6MjAKICAgIC8vIHNlbGYub3duZXIgPSBBY2NvdW50KCkKICAgIGJ5dGUgIm93bmVyIgogICAgLy8gdXNyL2xvY2FsL2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMvb3BlbnN1Ym1hcmluZS9jb250cmFjdHMvdXBkYXRlL1VwZ3JhZGVhYmxlL2NvbnRyYWN0LnB5OjEwNAogICAgLy8gYXJjNC5lbWl0KFVwZGF0ZUFwcHJvdmVkKGFyYzQuQWRkcmVzcyhzZWxmLm93bmVyKSwgYXBwcm92YWwpKQogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLm93bmVyIGV4aXN0cwogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIG1ldGhvZCAiVXBkYXRlQXBwcm92ZWQoYWRkcmVzcyxib29sKSIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICAvLyB1c3IvbG9jYWwvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9vcGVuc3VibWFyaW5lL2NvbnRyYWN0cy91cGRhdGUvVXBncmFkZWFibGUvY29udHJhY3QucHk6MTA1CiAgICAvLyBzZWxmLnVwZGF0YWJsZSA9IGFwcHJvdmFsLm5hdGl2ZQogICAgZnJhbWVfZGlnIC0xCiAgICBpbnQgMAogICAgZ2V0Yml0CiAgICAvLyB1c3IvbG9jYWwvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9vcGVuc3VibWFyaW5lL2NvbnRyYWN0cy91cGRhdGUvVXBncmFkZWFibGUvY29udHJhY3QucHk6MzMKICAgIC8vIHNlbGYudXBkYXRhYmxlID0gYm9vbCgxKQogICAgYnl0ZSAidXBkYXRhYmxlIgogICAgLy8gdXNyL2xvY2FsL2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMvb3BlbnN1Ym1hcmluZS9jb250cmFjdHMvdXBkYXRlL1VwZ3JhZGVhYmxlL2NvbnRyYWN0LnB5OjEwNQogICAgLy8gc2VsZi51cGRhdGFibGUgPSBhcHByb3ZhbC5uYXRpdmUKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICByZXRzdWIKCgovLyBvcGVuc3VibWFyaW5lLmNvbnRyYWN0cy51cGRhdGUuVXBncmFkZWFibGUuY29udHJhY3QuVXBncmFkZWFibGUuZ3JhbnRfdXBncmFkZXIodXBncmFkZXI6IGJ5dGVzKSAtPiB2b2lkOgpncmFudF91cGdyYWRlcjoKICAgIC8vIHVzci9sb2NhbC9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL29wZW5zdWJtYXJpbmUvY29udHJhY3RzL3VwZGF0ZS9VcGdyYWRlYWJsZS9jb250cmFjdC5weToxMDctMTA4CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiBncmFudF91cGdyYWRlcihzZWxmLCB1cGdyYWRlcjogYXJjNC5BZGRyZXNzKSAtPiBOb25lOgogICAgcHJvdG8gMSAwCiAgICAvLyB1c3IvbG9jYWwvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9vcGVuc3VibWFyaW5lL2NvbnRyYWN0cy91cGRhdGUvVXBncmFkZWFibGUvY29udHJhY3QucHk6MTA5CiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciA9PSBHbG9iYWwuY3JlYXRvcl9hZGRyZXNzLCAibXVzdCBiZSBjcmVhdG9yIgogICAgdHhuIFNlbmRlcgogICAgZ2xvYmFsIENyZWF0b3JBZGRyZXNzCiAgICA9PQogICAgYXNzZXJ0IC8vIG11c3QgYmUgY3JlYXRvcgogICAgLy8gdXNyL2xvY2FsL2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMvb3BlbnN1Ym1hcmluZS9jb250cmFjdHMvdXBkYXRlL1VwZ3JhZGVhYmxlL2NvbnRyYWN0LnB5OjExMAogICAgLy8gYXJjNC5lbWl0KFVwZ3JhZGVyR3JhbnRlZChhcmM0LkFkZHJlc3Moc2VsZi51cGdyYWRlciksIHVwZ3JhZGVyKSkKICAgIGludCAwCiAgICAvLyB1c3IvbG9jYWwvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9vcGVuc3VibWFyaW5lL2NvbnRyYWN0cy91cGRhdGUvVXBncmFkZWFibGUvY29udHJhY3QucHk6MzQKICAgIC8vIHNlbGYudXBncmFkZXIgPSBBY2NvdW50KCkKICAgIGJ5dGUgInVwZ3JhZGVyIgogICAgLy8gdXNyL2xvY2FsL2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMvb3BlbnN1Ym1hcmluZS9jb250cmFjdHMvdXBkYXRlL1VwZ3JhZGVhYmxlL2NvbnRyYWN0LnB5OjExMAogICAgLy8gYXJjNC5lbWl0KFVwZ3JhZGVyR3JhbnRlZChhcmM0LkFkZHJlc3Moc2VsZi51cGdyYWRlciksIHVwZ3JhZGVyKSkKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi51cGdyYWRlciBleGlzdHMKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICBtZXRob2QgIlVwZ3JhZGVyR3JhbnRlZChhZGRyZXNzLGFkZHJlc3MpIgogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIC8vIHVzci9sb2NhbC9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL29wZW5zdWJtYXJpbmUvY29udHJhY3RzL3VwZGF0ZS9VcGdyYWRlYWJsZS9jb250cmFjdC5weTozNAogICAgLy8gc2VsZi51cGdyYWRlciA9IEFjY291bnQoKQogICAgYnl0ZSAidXBncmFkZXIiCiAgICAvLyB1c3IvbG9jYWwvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9vcGVuc3VibWFyaW5lL2NvbnRyYWN0cy91cGRhdGUvVXBncmFkZWFibGUvY29udHJhY3QucHk6MTExCiAgICAvLyBzZWxmLnVwZ3JhZGVyID0gdXBncmFkZXIubmF0aXZlCiAgICBmcmFtZV9kaWcgLTEKICAgIGFwcF9nbG9iYWxfcHV0CiAgICByZXRzdWIKCgovLyBvcGVuc3VibWFyaW5lLmNvbnRyYWN0cy51cGRhdGUuVXBncmFkZWFibGUuY29udHJhY3QuVXBncmFkZWFibGUub25fdXBkYXRlKCkgLT4gdm9pZDoKb25fdXBkYXRlOgogICAgLy8gdXNyL2xvY2FsL2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMvb3BlbnN1Ym1hcmluZS9jb250cmFjdHMvdXBkYXRlL1VwZ3JhZGVhYmxlL2NvbnRyYWN0LnB5OjkyLTkzCiAgICAvLyBAYXJjNC5iYXJlbWV0aG9kKGFsbG93X2FjdGlvbnM9WyJVcGRhdGVBcHBsaWNhdGlvbiJdKQogICAgLy8gZGVmIG9uX3VwZGF0ZShzZWxmKSAtPiBOb25lOgogICAgcHJvdG8gMCAwCiAgICAvLyB1c3IvbG9jYWwvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9vcGVuc3VibWFyaW5lL2NvbnRyYWN0cy91cGRhdGUvVXBncmFkZWFibGUvY29udHJhY3QucHk6OTQtOTcKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gIyBXQVJOSU5HOiBUaGlzIGFwcCBjYW4gYmUgdXBkYXRlZCBieSB0aGUgY3JlYXRvcgogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciA9PSBzZWxmLnVwZ3JhZGVyLCAibXVzdCBiZSB1cGdyYWRlciIKICAgIHR4biBTZW5kZXIKICAgIGludCAwCiAgICAvLyB1c3IvbG9jYWwvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9vcGVuc3VibWFyaW5lL2NvbnRyYWN0cy91cGRhdGUvVXBncmFkZWFibGUvY29udHJhY3QucHk6MzQKICAgIC8vIHNlbGYudXBncmFkZXIgPSBBY2NvdW50KCkKICAgIGJ5dGUgInVwZ3JhZGVyIgogICAgLy8gdXNyL2xvY2FsL2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMvb3BlbnN1Ym1hcmluZS9jb250cmFjdHMvdXBkYXRlL1VwZ3JhZGVhYmxlL2NvbnRyYWN0LnB5Ojk0LTk3CiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vICMgV0FSTklORzogVGhpcyBhcHAgY2FuIGJlIHVwZGF0ZWQgYnkgdGhlIGNyZWF0b3IKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gc2VsZi51cGdyYWRlciwgIm11c3QgYmUgdXBncmFkZXIiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYudXBncmFkZXIgZXhpc3RzCiAgICA9PQogICAgYXNzZXJ0IC8vIG11c3QgYmUgdXBncmFkZXIKICAgIC8vIHVzci9sb2NhbC9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL29wZW5zdWJtYXJpbmUvY29udHJhY3RzL3VwZGF0ZS9VcGdyYWRlYWJsZS9jb250cmFjdC5weTo5OAogICAgLy8gYXNzZXJ0IHNlbGYudXBkYXRhYmxlID09IFVJbnQ2NCgxKSwgIm5vdCBhcHByb3ZlZCIKICAgIGludCAwCiAgICAvLyB1c3IvbG9jYWwvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9vcGVuc3VibWFyaW5lL2NvbnRyYWN0cy91cGRhdGUvVXBncmFkZWFibGUvY29udHJhY3QucHk6MzMKICAgIC8vIHNlbGYudXBkYXRhYmxlID0gYm9vbCgxKQogICAgYnl0ZSAidXBkYXRhYmxlIgogICAgLy8gdXNyL2xvY2FsL2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMvb3BlbnN1Ym1hcmluZS9jb250cmFjdHMvdXBkYXRlL1VwZ3JhZGVhYmxlL2NvbnRyYWN0LnB5Ojk4CiAgICAvLyBhc3NlcnQgc2VsZi51cGRhdGFibGUgPT0gVUludDY0KDEpLCAibm90IGFwcHJvdmVkIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnVwZGF0YWJsZSBleGlzdHMKICAgIGludCAxCiAgICA9PQogICAgYXNzZXJ0IC8vIG5vdCBhcHByb3ZlZAogICAgcmV0c3ViCgoKLy8gY29udHJhY3QuRGVsZXRlYWJsZS5vbl9kZWxldGUoKSAtPiB2b2lkOgpvbl9kZWxldGU6CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjU3LTU4CiAgICAvLyBAYXJjNC5iYXJlbWV0aG9kKGFsbG93X2FjdGlvbnM9WyJEZWxldGVBcHBsaWNhdGlvbiJdKQogICAgLy8gZGVmIG9uX2RlbGV0ZShzZWxmKSAtPiBOb25lOiAgIyBwcmFnbWE6IG5vIGNvdmVyCiAgICBwcm90byAwIDAKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NTktNjIKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gIyBXQVJOSU5HOiBUaGlzIGFwcCBjYW4gYmUgZGVsZXRlZCBieSB0aGUgY3JlYXRvciAoRGV2ZWxvcG1lbnQpCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyID09IEdsb2JhbC5jcmVhdG9yX2FkZHJlc3MsICJtdXN0IGJlIGNyZWF0b3IiCiAgICB0eG4gU2VuZGVyCiAgICBnbG9iYWwgQ3JlYXRvckFkZHJlc3MKICAgID09CiAgICBhc3NlcnQgLy8gbXVzdCBiZSBjcmVhdG9yCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjYzCiAgICAvLyBhc3NlcnQgc2VsZi5kZWxldGFibGUgPT0gVUludDY0KDEpLCAibm90IGFwcHJvdmVkIgogICAgaW50IDAKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NDMKICAgIC8vIHNlbGYuZGVsZXRhYmxlID0gYm9vbCgxKQogICAgYnl0ZSAiZGVsZXRhYmxlIgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo2MwogICAgLy8gYXNzZXJ0IHNlbGYuZGVsZXRhYmxlID09IFVJbnQ2NCgxKSwgIm5vdCBhcHByb3ZlZCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5kZWxldGFibGUgZXhpc3RzCiAgICBpbnQgMQogICAgPT0KICAgIGFzc2VydCAvLyBub3QgYXBwcm92ZWQKICAgIHJldHN1YgoKCi8vIGNvbnRyYWN0LlNsb3RNYWNoaW5lUGF5b3V0TW9kZWwuX19pbml0X18oKSAtPiB2b2lkOgpfX2luaXRfXzoKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjMyCiAgICAvLyBkZWYgX19pbml0X18oc2VsZikgLT4gTm9uZToKICAgIHByb3RvIDAgMAogICAgLy8gdXNyL2xvY2FsL2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMvb3BlbnN1Ym1hcmluZS9jb250cmFjdHMvYWNjZXNzL093bmFibGUvY29udHJhY3QucHk6MjAKICAgIC8vIHNlbGYub3duZXIgPSBBY2NvdW50KCkKICAgIGJ5dGUgIm93bmVyIgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyMzMtMjM0CiAgICAvLyAjIG93bmFibGUgc3RhdGUKICAgIC8vIHNlbGYub3duZXIgPSBHbG9iYWwuY3JlYXRvcl9hZGRyZXNzCiAgICBnbG9iYWwgQ3JlYXRvckFkZHJlc3MKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyB1c3IvbG9jYWwvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9vcGVuc3VibWFyaW5lL2NvbnRyYWN0cy91cGRhdGUvVXBncmFkZWFibGUvY29udHJhY3QucHk6MzQKICAgIC8vIHNlbGYudXBncmFkZXIgPSBBY2NvdW50KCkKICAgIGJ5dGUgInVwZ3JhZGVyIgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyMzUtMjM2CiAgICAvLyAjIHVwZ3JhZGFibGUgc3RhdGUKICAgIC8vIHNlbGYudXBncmFkZXIgPSBHbG9iYWwuY3JlYXRvcl9hZGRyZXNzCiAgICBnbG9iYWwgQ3JlYXRvckFkZHJlc3MKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyB1c3IvbG9jYWwvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9vcGVuc3VibWFyaW5lL2NvbnRyYWN0cy91cGRhdGUvVXBncmFkZWFibGUvY29udHJhY3QucHk6MzEKICAgIC8vIHNlbGYuY29udHJhY3RfdmVyc2lvbiA9IFVJbnQ2NCgpCiAgICBieXRlICJjb250cmFjdF92ZXJzaW9uIgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyMzcKICAgIC8vIHNlbGYuY29udHJhY3RfdmVyc2lvbiA9IFVJbnQ2NCgpCiAgICBpbnQgMAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHVzci9sb2NhbC9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL29wZW5zdWJtYXJpbmUvY29udHJhY3RzL3VwZGF0ZS9VcGdyYWRlYWJsZS9jb250cmFjdC5weTozMgogICAgLy8gc2VsZi5kZXBsb3ltZW50X3ZlcnNpb24gPSBVSW50NjQoKQogICAgYnl0ZSAiZGVwbG95bWVudF92ZXJzaW9uIgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyMzgKICAgIC8vIHNlbGYuZGVwbG95bWVudF92ZXJzaW9uID0gVUludDY0KCkKICAgIGludCAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gdXNyL2xvY2FsL2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMvb3BlbnN1Ym1hcmluZS9jb250cmFjdHMvdXBkYXRlL1VwZ3JhZGVhYmxlL2NvbnRyYWN0LnB5OjMzCiAgICAvLyBzZWxmLnVwZGF0YWJsZSA9IGJvb2woMSkKICAgIGJ5dGUgInVwZGF0YWJsZSIKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjM5CiAgICAvLyBzZWxmLnVwZGF0YWJsZSA9IGJvb2woMSkKICAgIGludCAxCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo0MwogICAgLy8gc2VsZi5kZWxldGFibGUgPSBib29sKDEpCiAgICBieXRlICJkZWxldGFibGUiCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjI0MC0yNDEKICAgIC8vICMgZGVsZXRlYWJsZSBzdGF0ZQogICAgLy8gc2VsZi5kZWxldGFibGUgPSBib29sKDEpCiAgICBpbnQgMQogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjQyLTI0MwogICAgLy8gIyBwYXlvdXQgbW9kZWwgc3RhdGUKICAgIC8vIHNlbGYucGF5b3V0X21vZGVsID0gc2VsZi5faW5pdGlhbF9wYXlvdXRfbW9kZWwoKQogICAgY2FsbHN1YiBfaW5pdGlhbF9wYXlvdXRfbW9kZWwKICAgIGJ5dGUgInBheW91dF9tb2RlbCIKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICByZXRzdWIKCgovLyBjb250cmFjdC5TbG90TWFjaGluZVBheW91dE1vZGVsSW50ZXJmYWNlLl9pbml0aWFsX3BheW91dF9tb2RlbCgpIC0+IGJ5dGVzOgpfaW5pdGlhbF9wYXlvdXRfbW9kZWw6CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjIwMi0yMDMKICAgIC8vIEBzdWJyb3V0aW5lCiAgICAvLyBkZWYgX2luaXRpYWxfcGF5b3V0X21vZGVsKHNlbGYpIC0+IFBheW91dE1vZGVsOgogICAgcHJvdG8gMCAxCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjIwNy0yMjQKICAgIC8vIHJldHVybiBQYXlvdXRNb2RlbCgKICAgIC8vICAgICBtdWx0aXBsaWVycz1hcmM0LlN0YXRpY0FycmF5KAogICAgLy8gICAgICAgICBhcmM0LlVJbnQ2NCgwKSwKICAgIC8vICAgICAgICAgYXJjNC5VSW50NjQoMCksCiAgICAvLyAgICAgICAgIGFyYzQuVUludDY0KDApLAogICAgLy8gICAgICAgICBhcmM0LlVJbnQ2NCgwKSwKICAgIC8vICAgICAgICAgYXJjNC5VSW50NjQoMCksCiAgICAvLyAgICAgICAgIGFyYzQuVUludDY0KDApLAogICAgLy8gICAgICksCiAgICAvLyAgICAgcHJvYmFiaWxpdGllcz1hcmM0LlN0YXRpY0FycmF5KAogICAgLy8gICAgICAgICBhcmM0LlVJbnQ2NCgwKSwKICAgIC8vICAgICAgICAgYXJjNC5VSW50NjQoMCksCiAgICAvLyAgICAgICAgIGFyYzQuVUludDY0KDApLAogICAgLy8gICAgICAgICBhcmM0LlVJbnQ2NCgwKSwKICAgIC8vICAgICAgICAgYXJjNC5VSW50NjQoMCksCiAgICAvLyAgICAgICAgIGFyYzQuVUludDY0KDApLAogICAgLy8gICAgICksCiAgICAvLyApCiAgICBieXRlIDB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCiAgICByZXRzdWIK",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpjb250cmFjdC5TbG90TWFjaGluZVBheW91dE1vZGVsLmNsZWFyX3N0YXRlX3Byb2dyYW06CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjIyNwogICAgLy8gY2xhc3MgU2xvdE1hY2hpbmVQYXlvdXRNb2RlbChTbG90TWFjaGluZVBheW91dE1vZGVsSW50ZXJmYWNlLCBVcGdyYWRlYWJsZSwgRGVsZXRlYWJsZSk6CiAgICBpbnQgMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 3,
            "num_uints": 4
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "contract_version": {
                    "type": "uint64",
                    "key": "contract_version"
                },
                "deletable": {
                    "type": "uint64",
                    "key": "deletable"
                },
                "deployment_version": {
                    "type": "uint64",
                    "key": "deployment_version"
                },
                "owner": {
                    "type": "bytes",
                    "key": "owner"
                },
                "payout_model": {
                    "type": "bytes",
                    "key": "payout_model"
                },
                "updatable": {
                    "type": "uint64",
                    "key": "updatable"
                },
                "upgrader": {
                    "type": "bytes",
                    "key": "upgrader"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "SlotMachinePayoutModel",
        "desc": "\n    A simple slot machine payout model\n    ",
        "methods": [
            {
                "name": "set_payout_model",
                "args": [
                    {
                        "type": "uint64[6]",
                        "name": "multipliers"
                    },
                    {
                        "type": "uint64[6]",
                        "name": "probabilities"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Set the payout model"
            },
            {
                "name": "get_payout_model",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "(uint64[6],uint64[6])"
                },
                "desc": "Get the payout model"
            },
            {
                "name": "get_payout",
                "args": [
                    {
                        "type": "uint64",
                        "name": "bet_amount"
                    },
                    {
                        "type": "uint64",
                        "name": "r"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                },
                "desc": "Get the payout for a bet"
            },
            {
                "name": "set_version",
                "args": [
                    {
                        "type": "uint64",
                        "name": "contract_version"
                    },
                    {
                        "type": "uint64",
                        "name": "deployment_version"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "approve_update",
                "args": [
                    {
                        "type": "bool",
                        "name": "approval"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "grant_upgrader",
                "args": [
                    {
                        "type": "address",
                        "name": "upgrader"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "transfer",
                "args": [
                    {
                        "type": "address",
                        "name": "new_owner"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event."
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "update_application": "CALL",
        "delete_application": "CALL",
        "no_op": "CREATE"
    }
};
/**
 * Converts the tuple representation of a PayoutModel to the struct representation
 */
export function PayoutModel([multipliers, probabilities]) {
    return {
        multipliers,
        probabilities,
    };
}
/**
 * Exposes methods for constructing all available smart contract calls
 */
export class SlotMachinePayoutModelCallFactory {
    /**
     * Gets available create call factories
     */
    static get create() {
        return {
            /**
             * Constructs a create call for the SlotMachinePayoutModel smart contract using a bare call
             *
             * @param params Any parameters for the call
             * @returns A TypedCallParams object for the call
             */
            bare(params = {}) {
                return {
                    method: undefined,
                    methodArgs: undefined,
                    ...params,
                };
            },
        };
    }
    /**
     * Gets available update call factories
     */
    static get update() {
        return {
            /**
             * Constructs an update call for the SlotMachinePayoutModel smart contract using a bare call
             *
             * @param params Any parameters for the call
             * @returns A TypedCallParams object for the call
             */
            bare(params = {}) {
                return {
                    method: undefined,
                    methodArgs: undefined,
                    ...params,
                };
            },
        };
    }
    /**
     * Gets available delete call factories
     */
    static get delete() {
        return {
            /**
             * Constructs a delete call for the SlotMachinePayoutModel smart contract using a bare call
             *
             * @param params Any parameters for the call
             * @returns A TypedCallParams object for the call
             */
            bare(params = {}) {
                return {
                    method: undefined,
                    methodArgs: undefined,
                    ...params,
                };
            },
        };
    }
    /**
     * Constructs a no op call for the set_payout_model(uint64[6],uint64[6])void ABI method
     *
     * Set the payout model
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static setPayoutModel(args, params) {
        return {
            method: 'set_payout_model(uint64[6],uint64[6])void',
            methodArgs: Array.isArray(args) ? args : [args.multipliers, args.probabilities],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the get_payout_model()(uint64[6],uint64[6]) ABI method
     *
     * Get the payout model
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static getPayoutModel(args, params) {
        return {
            method: 'get_payout_model()(uint64[6],uint64[6])',
            methodArgs: Array.isArray(args) ? args : [],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the get_payout(uint64,uint64)uint64 ABI method
     *
     * Get the payout for a bet
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static getPayout(args, params) {
        return {
            method: 'get_payout(uint64,uint64)uint64',
            methodArgs: Array.isArray(args) ? args : [args.betAmount, args.r],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the set_version(uint64,uint64)void ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static setVersion(args, params) {
        return {
            method: 'set_version(uint64,uint64)void',
            methodArgs: Array.isArray(args) ? args : [args.contractVersion, args.deploymentVersion],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the approve_update(bool)void ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static approveUpdate(args, params) {
        return {
            method: 'approve_update(bool)void',
            methodArgs: Array.isArray(args) ? args : [args.approval],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the grant_upgrader(address)void ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static grantUpgrader(args, params) {
        return {
            method: 'grant_upgrader(address)void',
            methodArgs: Array.isArray(args) ? args : [args.upgrader],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the transfer(address)void ABI method
     *
     * Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event.
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static transfer(args, params) {
        return {
            method: 'transfer(address)void',
            methodArgs: Array.isArray(args) ? args : [args.newOwner],
            ...params,
        };
    }
}
/**
 * A client to make calls to the SlotMachinePayoutModel smart contract
 */
export class SlotMachinePayoutModelClient {
    algod;
    /**
     * The underlying `ApplicationClient` for when you want to have more flexibility
     */
    appClient;
    sender;
    /**
     * Creates a new instance of `SlotMachinePayoutModelClient`
     *
     * @param appDetails appDetails The details to identify the app to deploy
     * @param algod An algod client instance
     */
    constructor(appDetails, algod) {
        this.algod = algod;
        this.sender = appDetails.sender;
        this.appClient = algokit.getAppClient({
            ...appDetails,
            app: APP_SPEC
        }, algod);
    }
    /**
     * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
     *
     * @param result The AppCallTransactionResult to be mapped
     * @param returnValueFormatter An optional delegate to format the return value if required
     * @returns The smart contract response with an updated return value
     */
    mapReturnValue(result, returnValueFormatter) {
        if (result.return?.decodeError) {
            throw result.return.decodeError;
        }
        const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
            ? returnValueFormatter(result.return.returnValue)
            : result.return?.returnValue;
        return { ...result, return: returnValue };
    }
    /**
     * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
     *
     * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
     * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
     * @returns The result of the smart contract call
     */
    async call(typedCallParams, returnValueFormatter) {
        return this.mapReturnValue(await this.appClient.call(typedCallParams), returnValueFormatter);
    }
    /**
     * Idempotently deploys the SlotMachinePayoutModel smart contract.
     *
     * @param params The arguments for the contract calls and any additional parameters for the call
     * @returns The deployment result
     */
    deploy(params = {}) {
        const createArgs = params.createCall?.(SlotMachinePayoutModelCallFactory.create);
        const updateArgs = params.updateCall?.(SlotMachinePayoutModelCallFactory.update);
        const deleteArgs = params.deleteCall?.(SlotMachinePayoutModelCallFactory.delete);
        return this.appClient.deploy({
            ...params,
            updateArgs,
            deleteArgs,
            createArgs,
            createOnCompleteAction: createArgs?.onCompleteAction,
        });
    }
    /**
     * Gets available create methods
     */
    get create() {
        const $this = this;
        return {
            /**
             * Creates a new instance of the SlotMachinePayoutModel smart contract using a bare call.
             *
             * @param args The arguments for the bare call
             * @returns The create result
             */
            async bare(args = {}) {
                return $this.mapReturnValue(await $this.appClient.create(args));
            },
        };
    }
    /**
     * Gets available update methods
     */
    get update() {
        const $this = this;
        return {
            /**
             * Updates an existing instance of the SlotMachinePayoutModel smart contract using a bare call.
             *
             * @param args The arguments for the bare call
             * @returns The update result
             */
            async bare(args = {}) {
                return $this.mapReturnValue(await $this.appClient.update(args));
            },
        };
    }
    /**
     * Gets available delete methods
     */
    get delete() {
        const $this = this;
        return {
            /**
             * Deletes an existing instance of the SlotMachinePayoutModel smart contract using a bare call.
             *
             * @param args The arguments for the bare call
             * @returns The delete result
             */
            async bare(args = {}) {
                return $this.mapReturnValue(await $this.appClient.delete(args));
            },
        };
    }
    /**
     * Makes a clear_state call to an existing instance of the SlotMachinePayoutModel smart contract.
     *
     * @param args The arguments for the bare call
     * @returns The clear_state result
     */
    clearState(args = {}) {
        return this.appClient.clearState(args);
    }
    /**
     * Calls the set_payout_model(uint64[6],uint64[6])void ABI method.
     *
     * Set the payout model
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    setPayoutModel(args, params = {}) {
        return this.call(SlotMachinePayoutModelCallFactory.setPayoutModel(args, params));
    }
    /**
     * Calls the get_payout_model()(uint64[6],uint64[6]) ABI method.
     *
     * Get the payout model
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    getPayoutModel(args, params = {}) {
        return this.call(SlotMachinePayoutModelCallFactory.getPayoutModel(args, params), PayoutModel);
    }
    /**
     * Calls the get_payout(uint64,uint64)uint64 ABI method.
     *
     * Get the payout for a bet
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    getPayout(args, params = {}) {
        return this.call(SlotMachinePayoutModelCallFactory.getPayout(args, params));
    }
    /**
     * Calls the set_version(uint64,uint64)void ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    setVersion(args, params = {}) {
        return this.call(SlotMachinePayoutModelCallFactory.setVersion(args, params));
    }
    /**
     * Calls the approve_update(bool)void ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    approveUpdate(args, params = {}) {
        return this.call(SlotMachinePayoutModelCallFactory.approveUpdate(args, params));
    }
    /**
     * Calls the grant_upgrader(address)void ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    grantUpgrader(args, params = {}) {
        return this.call(SlotMachinePayoutModelCallFactory.grantUpgrader(args, params));
    }
    /**
     * Calls the transfer(address)void ABI method.
     *
     * Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    transfer(args, params = {}) {
        return this.call(SlotMachinePayoutModelCallFactory.transfer(args, params));
    }
    /**
     * Extracts a binary state value out of an AppState dictionary
     *
     * @param state The state dictionary containing the state value
     * @param key The key of the state value
     * @returns A BinaryState instance containing the state value, or undefined if the key was not found
     */
    static getBinaryState(state, key) {
        const value = state[key];
        if (!value)
            return undefined;
        if (!('valueRaw' in value))
            throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`);
        return {
            asString() {
                return value.value;
            },
            asByteArray() {
                return value.valueRaw;
            }
        };
    }
    /**
     * Extracts a integer state value out of an AppState dictionary
     *
     * @param state The state dictionary containing the state value
     * @param key The key of the state value
     * @returns An IntegerState instance containing the state value, or undefined if the key was not found
     */
    static getIntegerState(state, key) {
        const value = state[key];
        if (!value)
            return undefined;
        if ('valueRaw' in value)
            throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`);
        return {
            asBigInt() {
                return typeof value.value === 'bigint' ? value.value : BigInt(value.value);
            },
            asNumber() {
                return typeof value.value === 'bigint' ? Number(value.value) : value.value;
            },
        };
    }
    /**
     * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
     */
    async getGlobalState() {
        const state = await this.appClient.getGlobalState();
        return {
            get contractVersion() {
                return SlotMachinePayoutModelClient.getIntegerState(state, 'contract_version');
            },
            get deletable() {
                return SlotMachinePayoutModelClient.getIntegerState(state, 'deletable');
            },
            get deploymentVersion() {
                return SlotMachinePayoutModelClient.getIntegerState(state, 'deployment_version');
            },
            get owner() {
                return SlotMachinePayoutModelClient.getBinaryState(state, 'owner');
            },
            get payoutModel() {
                return SlotMachinePayoutModelClient.getBinaryState(state, 'payout_model');
            },
            get updatable() {
                return SlotMachinePayoutModelClient.getIntegerState(state, 'updatable');
            },
            get upgrader() {
                return SlotMachinePayoutModelClient.getBinaryState(state, 'upgrader');
            },
        };
    }
    compose() {
        const client = this;
        const atc = new AtomicTransactionComposer();
        let promiseChain = Promise.resolve();
        const resultMappers = [];
        return {
            setPayoutModel(args, params) {
                promiseChain = promiseChain.then(() => client.setPayoutModel(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            getPayoutModel(args, params) {
                promiseChain = promiseChain.then(() => client.getPayoutModel(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(PayoutModel);
                return this;
            },
            getPayout(args, params) {
                promiseChain = promiseChain.then(() => client.getPayout(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            setVersion(args, params) {
                promiseChain = promiseChain.then(() => client.setVersion(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            approveUpdate(args, params) {
                promiseChain = promiseChain.then(() => client.approveUpdate(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            grantUpgrader(args, params) {
                promiseChain = promiseChain.then(() => client.grantUpgrader(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            transfer(args, params) {
                promiseChain = promiseChain.then(() => client.transfer(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            get update() {
                const $this = this;
                return {
                    bare(args) {
                        promiseChain = promiseChain.then(() => client.update.bare({ ...args, sendParams: { ...args?.sendParams, skipSending: true, atc } }));
                        resultMappers.push(undefined);
                        return $this;
                    },
                };
            },
            get delete() {
                const $this = this;
                return {
                    bare(args) {
                        promiseChain = promiseChain.then(() => client.delete.bare({ ...args, sendParams: { ...args?.sendParams, skipSending: true, atc } }));
                        resultMappers.push(undefined);
                        return $this;
                    },
                };
            },
            clearState(args) {
                promiseChain = promiseChain.then(() => client.clearState({ ...args, sendParams: { ...args?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            addTransaction(txn, defaultSender) {
                promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)));
                return this;
            },
            async atc() {
                await promiseChain;
                return atc;
            },
            async simulate(options) {
                await promiseChain;
                const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }));
                return {
                    ...result,
                    returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i](val.returnValue) : val.returnValue)
                };
            },
            async execute(sendParams) {
                await promiseChain;
                const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod);
                return {
                    ...result,
                    returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i](val.returnValue) : val.returnValue)
                };
            }
        };
    }
}
